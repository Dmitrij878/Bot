import os
import logging
import asyncio
import aiohttp
import sqlite3
import re
import math
from dotenv import load_dotenv
from pathlib import Path
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command, CommandObject
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramRetryAfter
from aiogram.enums import ParseMode
import datetime
# 1. –ò–º–ø–æ—Ä—Ç langdetec
from langdetect import detect
import tempfile
import zipfile
from aiogram.types import InputFile
from aiogram.types.input_file import FSInputFile
import hashlib
import json

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ notify_file_changes (–∏ –≤—Å–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–µ—ë)
# –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –î–û main()

import hashlib
import json
import re
FILES_STATE_PATH = ".last_files_state.json"
SCAN_FILE = "bot_aiogram.py"

def get_file_hash(path):
    try:
        with open(path, "rb") as f:
            content = f.read()
        return hashlib.md5(content).hexdigest()
    except Exception:
        return None

def analyze_changes(old_content, new_content):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ"""
    changes = []
    
    # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ old_content –Ω–µ None
    old_content = old_content or ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    old_commands = re.findall(r'@dp\.message\(Command\("([^"]+)"\)\)', old_content)
    new_commands = re.findall(r'@dp\.message\(Command\("([^"]+)"\)\)', new_content)
    
    added_commands = set(new_commands) - set(old_commands)
    if added_commands:
        changes.append(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã: {', '.join(added_commands)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫
    if "command.args" in old_content and "message.text.split()" in new_content:
        changes.append("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    if "async def cmd_profile" in new_content and "async def cmd_profile" not in old_content:
        changes.append("üë§ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /profile —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π")
    
    if "async def cmd_limits" in new_content and "async def cmd_limits" not in old_content:
        changes.append("üìä –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /limits –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤")
    
    if "async def cmd_chats" in new_content and "async def cmd_chats" not in old_content:
        changes.append("üí¨ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    if "SPONSOR_CHANNEL_ID" in new_content and "SPONSOR_CHANNEL_ID" not in old_content:
        changes.append("üì¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã —Å–ø–æ–Ω—Å–æ—Ä–æ–≤")
    
    if "custom_limit" in new_content and "limit INTEGER" not in old_content:
        changes.append("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ SQLite —Å –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ª–æ–≤–æ–º 'limit'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    if "InlineKeyboardBuilder" in new_content and "InlineKeyboardBuilder" not in old_content:
        changes.append("üîò –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if "is_blacklisted" in new_content and "is_blacklisted" not in old_content:
        changes.append("üõ°Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not changes:
        changes.append("üìù –û–±—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ")
    
    return changes

async def notify_file_changes(bot):
    await asyncio.sleep(10)  # –ñ–¥—ë–º 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
    old_state = {}
    old_content = None
    
    if os.path.exists(FILES_STATE_PATH):
        with open(FILES_STATE_PATH, "r", encoding="utf-8") as f:
            old_state = json.load(f)
    
    # –ß–∏—Ç–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
    if old_state.get(SCAN_FILE + "_content"):
        old_content = old_state.get(SCAN_FILE + "_content")
    
    new_hash = get_file_hash(SCAN_FILE)
    old_hash = old_state.get(SCAN_FILE)
    
    if new_hash and old_hash and new_hash != old_hash:
        # –ß–∏—Ç–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        try:
            with open(SCAN_FILE, "r", encoding="utf-8") as f:
                new_content = f.read()
        except Exception:
            new_content = ""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        changes = analyze_changes(old_content, new_content)
        
        msg = f"<b>üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ {SCAN_FILE}:</b>\n\n"
        for change in changes:
            msg += f"‚Ä¢ {change}\n"
        
        try:
            await bot.send_message(LOG_CHAT_ID, msg, parse_mode="HTML")
        except Exception:
            pass
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        old_state[SCAN_FILE + "_content"] = new_content
        
    elif new_hash and not old_hash:
        msg = f"<b>üìÅ –§–∞–π–ª {SCAN_FILE} –¥–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤–ø–µ—Ä–≤—ã–µ.</b>"
        try:
            await bot.send_message(LOG_CHAT_ID, msg, parse_mode="HTML")
        except Exception:
            pass
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    old_state[SCAN_FILE] = new_hash
    with open(FILES_STATE_PATH, "w", encoding="utf-8") as f:
        json.dump(old_state, f, ensure_ascii=False, indent=2)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_path = Path(__file__).parent / '.env'
load_dotenv(dotenv_path=env_path)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
OWNER_ID = int(os.getenv('OWNER_ID', '0'))
OWNER_IDS = [int(x) for x in os.getenv('OWNER_IDS', '0').split(',')]
LOG_CHAT_ID = os.getenv('LOG_CHAT_ID')

AVAILABLE_MODELS = {
    'deepseek': {
        'id': 'deepseek/deepseek-chat-v3-0324:free',
        'desc': (
            'DeepSeek ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫—Ä—É–ø–Ω–∞—è –º–æ–¥–µ–ª—å, –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –∞–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö, —Å–ª–æ–∂–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. –•–æ—Ä–æ—à–æ –¥–µ—Ä–∂–∏—Ç –¥–ª–∏–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, —É–º–µ–µ—Ç –æ–±—ä—è—Å–Ω—è—Ç—å –∏ —Ä–∞—Å—Å—É–∂–¥–∞—Ç—å, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.\n'
            '–û—Ü–µ–Ω–∫–∏:\n'
            '‚Ä¢ –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: 8/10\n'
            '‚Ä¢ –û–±—â–µ–Ω–∏–µ/—á–∞—Ç: 8/10\n'
            '‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞: 10/10\n'
            '‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ: 9/10\n'
            '‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤/–∏—Å—Ç–æ—Ä–∏–∏: 7/10\n'
            '‚Ä¢ –†–æ–ª–µ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏: 7/10'
        )
    },
    'openchat': {
        'id': 'mistralai/mistral-7b-instruct:free',
        'desc': (
            'Mistral ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —á–∞—Ç–∞ –∏ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á. –û—Ç–ª–∏—á–∞–µ—Ç—Å—è –≤—ã—Å–æ–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º —Å—Ç–∏–ª–µ–º, —Ö–æ—Ä–æ—à–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è, —Å–æ–≤–µ—Ç–æ–≤, –∫–æ—Ä–æ—Ç–∫–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –±–∞–∑–æ–≤–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ.\n'
            '–û—Ü–µ–Ω–∫–∏:\n'
            '‚Ä¢ –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: 9/10\n'
            '‚Ä¢ –û–±—â–µ–Ω–∏–µ/—á–∞—Ç: 9/10\n'
            '‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞: 7/10\n'
            '‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ: 8/10\n'
            '‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤/–∏—Å—Ç–æ—Ä–∏–∏: 7/10\n'
            '‚Ä¢ –†–æ–ª–µ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏: 7/10'
        )
    },
    'mistral': {
        'id': 'mistralai/mistral-7b-instruct',
        'desc': (
            'Mistral ‚Äî –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å, –¥–∞—ë—Ç –∫—Ä–∞—Ç–∫–∏–µ, –ª–∞–∫–æ–Ω–∏—á–Ω—ã–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, —Ö–æ—Ä–æ—à–æ –¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤-–æ—Ç–≤–µ—Ç–æ–≤, —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –±—ã—Å—Ç—Ä—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤.\n'
            '–û—Ü–µ–Ω–∫–∏:\n'
            '‚Ä¢ –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: 8/10\n'
            '‚Ä¢ –û–±—â–µ–Ω–∏–µ/—á–∞—Ç: 8/10\n'
            '‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞: 7/10\n'
            '‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ: 8/10\n'
            '‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤/–∏—Å—Ç–æ—Ä–∏–∏: 6/10\n'
            '‚Ä¢ –†–æ–ª–µ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏: 6/10'
        )
    },
    'llama': {
        'id': 'meta-llama/llama-3.1-8b-instruct:free',
        'desc': (
            'Llama 3.1 ‚Äî –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏ –æ—Ç Meta, —Ö–æ—Ä–æ—à–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π, –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–π, —Ä–æ–ª–µ–≤—ã—Ö –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤. –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ª—É—á—à–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏.\n'
            '–û—Ü–µ–Ω–∫–∏:\n'
            '‚Ä¢ –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: 8/10\n'
            '‚Ä¢ –û–±—â–µ–Ω–∏–µ/—á–∞—Ç: 9/10\n'
            '‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞: 7/10\n'
            '‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ: 8/10\n'
            '‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤/–∏—Å—Ç–æ—Ä–∏–∏: 9/10\n'
            '‚Ä¢ –†–æ–ª–µ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏: 9/10'
        )
    },
    'mythomax': {
        'id': 'gryphe/mythomax-l2-13b',
        'desc': (
            'MythoMax ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Ä–æ–ª–µ–≤—ã—Ö, —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∏ –¥–ª–∏–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞—Ö, —Å—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥–µ, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—ã—á–Ω—ã—Ö –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤. –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∏–≥—Ä, —Ä–æ–ª–µ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤, —Ñ–∞–Ω—Ç–∞–∑–∏–π –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.\n'
            '–û—Ü–µ–Ω–∫–∏:\n'
            '‚Ä¢ –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: 6/10\n'
            '‚Ä¢ –û–±—â–µ–Ω–∏–µ/—á–∞—Ç: 7/10\n'
            '‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞: 5/10\n'
            '‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ: 6/10\n'
            '‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤/–∏—Å—Ç–æ—Ä–∏–∏: 10/10\n'
            '‚Ä¢ –†–æ–ª–µ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏: 10/10'
        )
    },
}
DEFAULT_MODEL = AVAILABLE_MODELS['deepseek']['id']

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, username TEXT, chat_id INTEGER)''')
    c.execute('''CREATE TABLE IF NOT EXISTS chat_history (user_id INTEGER, message_id INTEGER, role TEXT, content TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS user_models (user_id INTEGER PRIMARY KEY, model TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS blacklist (user_id INTEGER PRIMARY KEY)''')
    c.execute('''CREATE TABLE IF NOT EXISTS group_settings (
        group_id INTEGER PRIMARY KEY,
        mode TEXT,
        allowed_users TEXT
    )''')
    conn.commit()
    conn.close()

def migrate_old_models():
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    model_migrations = {
        'meta-llama/llama-2-7b-chat': 'meta-llama/llama-3.1-8b-instruct:free',
        'openchat/openchat-3.5': 'mistralai/mistral-7b-instruct:free',
        'openchat/openchat-3.5-0106': 'mistralai/mistral-7b-instruct:free',
    }
    for old_model, new_model in model_migrations.items():
        c.execute('UPDATE user_models SET model = ? WHERE model = ?', (new_model, old_model))
    conn.commit()
    conn.close()

def set_user_model(user_id, model):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('INSERT OR REPLACE INTO user_models (user_id, model) VALUES (?, ?)', (user_id, model))
    conn.commit()
    conn.close()

def get_user_model(user_id):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('SELECT model FROM user_models WHERE user_id = ?', (user_id,))
    row = c.fetchone()
    conn.close()
    if row and row[0]:
        if row[0] == 'meta-llama/llama-2-7b-chat':
            set_user_model(user_id, 'meta-llama/llama-3.1-8b-instruct:free')
            return 'meta-llama/llama-3.1-8b-instruct:free'
        return row[0]
    return None

def add_to_blacklist(user_id):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('INSERT OR IGNORE INTO blacklist (user_id) VALUES (?)', (user_id,))
    conn.commit()
    conn.close()

def remove_from_blacklist(user_id):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('DELETE FROM blacklist WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

def is_blacklisted(user_id):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('SELECT 1 FROM blacklist WHERE user_id = ?', (user_id,))
    result = c.fetchone()
    conn.close()
    return result is not None

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def convert_markdown_to_telegram(text):
    text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
    text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', text)
    text = re.sub(r'~~(.*?)~~', r'<s>\1</s>', text)
    text = re.sub(r'`(.*?)`', r'<code>\1</code>', text)
    text = re.sub(r'\[(.*?)\]\((.*?)\)', r'<a href="\2">\1</a>', text)
    text = re.sub(r'^#+\s+', '', text, flags=re.MULTILINE)
    text = re.sub(r'^[-*_]{3,}$', '', text, flags=re.MULTILINE)
    text = re.sub(r'\n{3,}', '\n\n', text)
    text = text.strip()
    return text

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ ---
GLOBAL_BOT_ENABLED = True

def set_global_bot_enabled(value: bool):
    global GLOBAL_BOT_ENABLED
    GLOBAL_BOT_ENABLED = value

def is_global_bot_enabled():
    return GLOBAL_BOT_ENABLED

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±–∞–∑—É ---
def log_event(event, details, user_id=None, username=None):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS logs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        date TEXT,
        user_id INTEGER,
        username TEXT,
        event TEXT,
        details TEXT
    )''')
    now = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    c.execute('INSERT INTO logs (date, user_id, username, event, details) VALUES (?, ?, ?, ?, ?)',
              (now, user_id, username, event, details))
    conn.commit()
    conn.close()

# log_suspicious —Ç–µ–ø–µ—Ä—å –ø–∏—à–µ—Ç –≤ –±–∞–∑—É –∏ –≤ LOG_CHAT_ID
import functools
def log_suspicious(text, user_id=None, username=None):
    log_event('suspicious', text, user_id, username)
    if LOG_CHAT_ID:
        from aiogram import Bot
        import asyncio
        async def send():
            bot = Bot(token=TELEGRAM_TOKEN)
            try:
                await bot.send_message(LOG_CHAT_ID, f"‚ö†Ô∏è <b>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>\n{text}", parse_mode=ParseMode.HTML)
            except Exception:
                pass
        asyncio.create_task(send())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ flood control ---
async def safe_send_message(bot, chat_id, *args, **kwargs):
    while True:
        try:
            return await bot.send_message(chat_id, *args, **kwargs)
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            break

async def safe_edit_message(message, *args, **kwargs):
    while True:
        try:
            return await message.edit_text(*args, **kwargs)
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            break

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: types.Message, command: CommandObject):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    chat_id = message.chat.id
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('INSERT OR REPLACE INTO users (user_id, username, chat_id) VALUES (?, ?, ?)', (user_id, username, chat_id))
    conn.commit()
    conn.close()
    model = get_user_model(user_id) or DEFAULT_MODEL
    model_name = [k for k, v in AVAILABLE_MODELS.items() if v['id'] == model]
    model_name = model_name[0] if model_name else model
    await safe_send_message(message.bot, chat_id, f'–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –º–æ–¥–µ–ª—å—é <b>{model_name}</b>\n–í –ª–∏—á–Ω–æ–º —á–∞—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤ –≥—Ä—É–ø–ø–µ ‚Äî –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –º–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n–î–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help', parse_mode=ParseMode.HTML)

@dp.message(Command("help"))
async def cmd_help(message: types.Message, command: CommandObject):
    text = (
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/models ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞\n"
        "/setmodel &lt;–∏–º—è&gt; ‚Äî –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –≤—Ä—É—á–Ω—É—é (–∫–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ –ø–æ–ª–Ω–æ–µ –∏–º—è)\n"
        "/clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏ –∫—ç—à\n"
        "/history ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π\n"
        "/language ‚Äî –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n"
        "/systemprompt &lt;—Ç–µ–∫—Å—Ç&gt; ‚Äî –∑–∞–¥–∞—Ç—å —Å–≤–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM\n"
        "/limits ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "/profile ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "\n<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (—É—Å–∫–æ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç—ã –∏ —ç–∫–æ–Ω–æ–º–∏—Ç –ª–∏–º–∏—Ç)\n"
        "‚Ä¢ –õ–∏–º–∏—Ç—ã –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏ (—É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–æ–≤/—á–∞—Ç–æ–≤ —Å–ø–æ–Ω—Å–æ—Ä–∞)\n"
        "‚Ä¢ –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞: üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å, üåê –ü–µ—Ä–µ–≤–µ—Å—Ç–∏, üëç/üëé –û—Ü–µ–Ω–∏—Ç—å, üóÇ –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å –¥–∏–∞–ª–æ–≥\n"
        "‚Ä¢ –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ (—Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º)\n"
        "\n<b>–í –≥—Ä—É–ø–ø–µ:</b>\n"
        "‚Ä¢ –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ reply, –ø–æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º)\n"
        "\n"
    )
    await message.answer(text, parse_mode=ParseMode.HTML)

@dp.message(Command("ownerhelp"))
async def cmd_ownerhelp(message: types.Message, command: CommandObject):
    if message.from_user.id not in OWNER_IDS:
        await safe_send_message(message.bot, message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return
    text = (
        "<b>–ö–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞:</b>\n"
        "/broadcast &lt;—Ç–µ–∫—Å—Ç&gt; ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
        "/stats ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/go ‚Äî –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—Ä–∞–∑—Ä–µ—à–∞–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –≤—Å–µ–º)\n"
        "/stop ‚Äî –≥–ª–æ–±–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ (–±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∏–∫–æ–º—É, –∫—Ä–æ–º–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞)\n"
        "/migrate ‚Äî –º–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ –Ω–æ–≤—ã–µ\n"
        "/block &lt;id&gt; ‚Äî –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/unblock &lt;id&gt; ‚Äî —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/blacklist ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫\n"
        "/groupmode ‚Äî —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –≤ –≥—Ä—É–ø–ø–µ (—Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ)\n"
        "/addgroupuser &lt;id&gt; ‚Äî —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ (—Ä–µ–∂–∏–º users)\n"
        "/removegroupuser &lt;id&gt; ‚Äî —É–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –≤ –≥—Ä—É–ø–ø–µ (—Ä–µ–∂–∏–º users)\n"
        "/groupusers ‚Äî —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ (—Ä–µ–∂–∏–º users)\n"
        "/setlimit &lt;user_id&gt; &lt;—á–∏—Å–ª–æ&gt; ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/chats ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/logs ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏\n"
    )
    await safe_send_message(message.bot, message.chat.id, text, parse_mode=ParseMode.HTML)

@dp.message(Command("setlimit"))
async def cmd_setlimit(message: types.Message, command: CommandObject):
    if message.from_user.id not in OWNER_IDS:
        await safe_send_message(message.bot, message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    parts = message.text.split()
    if len(parts) < 3:
        await safe_send_message(message.bot, message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setlimit &lt;user_id&gt; &lt;—á–∏—Å–ª–æ&gt;", parse_mode=ParseMode.HTML)
        return
    
    try:
        target_user_id = int(parts[1])
        new_limit = int(parts[2])
        
        if new_limit < 0:
            await safe_send_message(message.bot, message.chat.id, "–õ–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            return
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        c.execute('CREATE TABLE IF NOT EXISTS user_custom_limits (user_id INTEGER PRIMARY KEY, custom_limit INTEGER)')
        c.execute('INSERT OR REPLACE INTO user_custom_limits (user_id, custom_limit) VALUES (?, ?)', (target_user_id, new_limit))
        conn.commit()
        conn.close()
        
        await safe_send_message(message.bot, message.chat.id, f"–õ–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_limit} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å.")
        
    except ValueError:
        await safe_send_message(message.bot, message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setlimit &lt;user_id&gt; &lt;—á–∏—Å–ª–æ&gt;", parse_mode=ParseMode.HTML)
    except Exception as e:
        await safe_send_message(message.bot, message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command("chats"))
async def cmd_chats(message: types.Message, command: CommandObject):
    if message.from_user.id not in OWNER_IDS:
        await safe_send_message(message.bot, message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return
    
    await show_chats_list(message.bot, message.chat.id, sort_by="messages_desc")

async def show_chats_list(bot, chat_id, sort_by="messages_desc", page=1):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º SQL –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    sort_queries = {
        "messages_desc": '''
            SELECT DISTINCT u.user_id, u.username, COUNT(ch.message_id) as msg_count
            FROM users u
            LEFT JOIN chat_history ch ON u.user_id = ch.user_id
            GROUP BY u.user_id
            HAVING msg_count > 0
            ORDER BY msg_count DESC
        ''',
        "messages_asc": '''
            SELECT DISTINCT u.user_id, u.username, COUNT(ch.message_id) as msg_count
            FROM users u
            LEFT JOIN chat_history ch ON u.user_id = ch.user_id
            GROUP BY u.user_id
            HAVING msg_count > 0
            ORDER BY msg_count ASC
        ''',
        "username_asc": '''
            SELECT DISTINCT u.user_id, u.username, COUNT(ch.message_id) as msg_count
            FROM users u
            LEFT JOIN chat_history ch ON u.user_id = ch.user_id
            GROUP BY u.user_id
            HAVING msg_count > 0
            ORDER BY COALESCE(u.username, '') ASC
        ''',
        "username_desc": '''
            SELECT DISTINCT u.user_id, u.username, COUNT(ch.message_id) as msg_count
            FROM users u
            LEFT JOIN chat_history ch ON u.user_id = ch.user_id
            GROUP BY u.user_id
            HAVING msg_count > 0
            ORDER BY COALESCE(u.username, '') DESC
        ''',
        "recent": '''
            SELECT DISTINCT u.user_id, u.username, COUNT(ch.message_id) as msg_count,
                   MAX(ch.message_id) as last_message_id
            FROM users u
            LEFT JOIN chat_history ch ON u.user_id = ch.user_id
            GROUP BY u.user_id
            HAVING msg_count > 0
            ORDER BY last_message_id DESC
        ''',
        "oldest": '''
            SELECT DISTINCT u.user_id, u.username, COUNT(ch.message_id) as msg_count,
                   MIN(ch.message_id) as first_message_id
            FROM users u
            LEFT JOIN chat_history ch ON u.user_id = ch.user_id
            GROUP BY u.user_id
            HAVING msg_count > 0
            ORDER BY first_message_id ASC
        '''
    }
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —á–∞—Ç–∞–º–∏
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute(sort_queries[sort_by] + f" LIMIT 20 OFFSET {(page - 1) * 20}")
    users = c.fetchall()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —á–∞—Ç–∞–º–∏
    c.execute('''
        SELECT COUNT(DISTINCT u.user_id)
        FROM users u
        LEFT JOIN chat_history ch ON u.user_id = ch.user_id
        GROUP BY u.user_id
        HAVING COUNT(ch.message_id) > 0
    ''')
    total_users = len(c.fetchall())
    conn.close()
    
    if not users:
        await safe_send_message(bot, chat_id, "–ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    sort_names = {
        "messages_desc": "üìä –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π (—É–±—ã–≤–∞–Ω–∏–µ)",
        "messages_asc": "üìä –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ)",
        "username_asc": "üë§ –ü–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ê-–Ø)",
        "username_desc": "üë§ –ü–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ø-–ê)",
        "recent": "üïí –ü–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        "oldest": "üïí –ü–æ –ø–µ—Ä–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
    }
    
    text = f"üì± <b>–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
    text += f"üîÄ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {sort_names[sort_by]}\n"
    text += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {max(1, (total_users + 19) // 20)}\n\n"
    
    builder = InlineKeyboardBuilder()
    
    for i, user_data in enumerate(users, 1):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        if len(user_data) == 3:
            user_id, username, msg_count = user_data
        elif len(user_data) == 4:
            user_id, username, msg_count, _ = user_data  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
        else:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            
        display_name = f"@{username}" if username else f"ID: {user_id}"
        text += f"{i}. {display_name} ({msg_count} —Å–æ–æ–±—â–µ–Ω–∏–π)\n"
        builder.button(text=f"{i}. {display_name[:15]}", callback_data=f"view_chat|{user_id}|1")
    
    # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    builder.button(text="üìä –ü–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º ‚Üì", callback_data=f"sort_chats|messages_desc|{page}")
    builder.button(text="üìä –ü–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º ‚Üë", callback_data=f"sort_chats|messages_asc|{page}")
    builder.button(text="üë§ –ü–æ –∏–º–µ–Ω–∏ –ê-–Ø", callback_data=f"sort_chats|username_asc|{page}")
    builder.button(text="üë§ –ü–æ –∏–º–µ–Ω–∏ –Ø-–ê", callback_data=f"sort_chats|username_desc|{page}")
    builder.button(text="üïí –ü–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data=f"sort_chats|recent|{page}")
    builder.button(text="üïí –ü–æ —Å—Ç–∞—Ä—à–∏–Ω—Å—Ç–≤—É", callback_data=f"sort_chats|oldest|{page}")
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if page > 1:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"sort_chats|{sort_by}|{page-1}")
    if page < (total_users + 19) // 20:
        builder.button(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"sort_chats|{sort_by}|{page+1}")
    
    builder.adjust(2, 2, 2, 2, 2, 2, 2)  # 7 —Å—Ç—Ä–æ–∫ –ø–æ 2 –∫–Ω–æ–ø–∫–∏
    
    await safe_send_message(bot, chat_id, text, 
                          reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)

@dp.message(Command("clear"))
async def cmd_clear(message: types.Message, command: CommandObject):
    user_id = message.from_user.id
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('DELETE FROM chat_history WHERE user_id = ?', (user_id,))
    c.execute('DELETE FROM cache WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()
    await safe_send_message(message.bot, message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏ –∫—ç—à –æ—á–∏—â–µ–Ω—ã!")

@dp.message(Command("limits"))
async def cmd_limits(message: types.Message, command: CommandObject):
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
    channel_subscribed = False
    chat_subscribed = False
    
    try:
        member = await message.bot.get_chat_member(SPONSOR_CHANNEL_ID, user_id)
        if member.status in ("member", "administrator", "creator"):
            channel_subscribed = True
    except Exception:
        pass
    
    try:
        member = await message.bot.get_chat_member(SPONSOR_CHAT_ID, user_id)
        if member.status in ("member", "administrator", "creator"):
            chat_subscribed = True
    except Exception:
        pass
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã
    daily_limit = await get_user_daily_limit(message.bot, user_id)
    current_usage = get_user_limit(user_id)
    
    status_text = f"üìä <b>–í–∞—à–∏ –ª–∏–º–∏—Ç—ã:</b>\n\n"
    status_text += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {current_usage}/{daily_limit}\n\n"
    
    if channel_subscribed and chat_subscribed:
        status_text += "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏: –û–±–∞ –∫–∞–Ω–∞–ª–∞\n"
        status_text += f"–ë–æ–Ω—É—Å: +{CHANNEL_BONUS + CHAT_BONUS} –∑–∞–ø—Ä–æ—Å–æ–≤"
    elif channel_subscribed:
        status_text += "‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∏: –¢–æ–ª—å–∫–æ Axis Messenger\n"
        status_text += f"–ë–æ–Ω—É—Å: +{CHANNEL_BONUS} –∑–∞–ø—Ä–æ—Å–æ–≤"
    elif chat_subscribed:
        status_text += "‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∏: –¢–æ–ª—å–∫–æ Axis Messenger Dev\n"
        status_text += f"–ë–æ–Ω—É—Å: +{CHAT_BONUS} –∑–∞–ø—Ä–æ—Å–æ–≤"
    else:
        status_text += "‚ùå –ü–æ–¥–ø–∏—Å–∫–∏: –ù–µ—Ç\n"
        status_text += "–ë–æ–Ω—É—Å: +0 –∑–∞–ø—Ä–æ—Å–æ–≤"
    
    builder = InlineKeyboardBuilder()
    if not channel_subscribed:
        builder.button(text="üì¢ Axis Messenger", url="https://t.me/Axis_Messenger")
    if not chat_subscribed:
        builder.button(text="üíª Axis Messenger Dev", url="https://t.me/AxisMessengerDev")
    if not (channel_subscribed and chat_subscribed):
        builder.button(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="check_subscriptions")
    
    if builder.buttons:
        builder.adjust(2, 1)
        await safe_send_message(message.bot, chat_id, status_text, 
                              reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    else:
        await safe_send_message(message.bot, chat_id, status_text, parse_mode=ParseMode.HTML)

@dp.message(Command("profile"))
async def cmd_profile(message: types.Message, command: CommandObject):
    user_id = message.from_user.id
    chat_id = message.chat.id
    username = message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
    first_name = message.from_user.first_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    last_name = message.from_user.last_name or ""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in OWNER_IDS:
        status = "üëë –í–ª–∞–¥–µ–ª–µ—Ü"
        status_emoji = "üëë"
    elif message.from_user.id == (await message.bot.me()).id:
        status = "ü§ñ –ë–æ—Ç"
        status_emoji = "ü§ñ"
    else:
        status = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        status_emoji = "üë§"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
    is_banned = is_blacklisted(user_id)
    ban_status = "üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if is_banned else "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö
    daily_limit = await get_user_daily_limit(message.bot, user_id)
    current_usage = get_user_limit(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
    channel_subscribed = False
    chat_subscribed = False
    
    try:
        member = await message.bot.get_chat_member(SPONSOR_CHANNEL_ID, user_id)
        if member.status in ("member", "administrator", "creator"):
            channel_subscribed = True
    except Exception:
        pass
    
    try:
        member = await message.bot.get_chat_member(SPONSOR_CHAT_ID, user_id)
        if member.status in ("member", "administrator", "creator"):
            chat_subscribed = True
    except Exception:
        pass
    
    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_model = get_user_model(user_id) or DEFAULT_MODEL
    model_name = next((k for k, v in AVAILABLE_MODELS.items() if v['id'] == user_model), user_model)
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_language = get_user_language(user_id)
    language_name = LANGUAGES.get(user_language, user_language)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    system_prompt = get_user_systemprompt(user_id)
    has_custom_prompt = "‚úÖ –î–∞" if system_prompt else "‚ùå –ù–µ—Ç"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('SELECT COUNT(*) FROM chat_history WHERE user_id = ? AND role = "user"', (user_id,))
    messages_count = c.fetchone()[0] or 0
    c.execute('SELECT COUNT(*) FROM chat_history WHERE user_id = ? AND role = "assistant"', (user_id,))
    responses_count = c.fetchone()[0] or 0
    conn.close()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    profile_text = f"<b>{status_emoji} –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
    profile_text += f"<b>ID:</b> <code>{user_id}</code>\n"
    profile_text += f"<b>–ò–º—è:</b> {first_name} {last_name}\n"
    profile_text += f"<b>Username:</b> @{username}\n"
    profile_text += f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
    profile_text += f"<b>–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞:</b> {ban_status}\n\n"
    
    profile_text += f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    profile_text += f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {messages_count}\n"
    profile_text += f"‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {responses_count}\n"
    profile_text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {current_usage}/{daily_limit}\n\n"
    
    profile_text += f"<b>üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
    profile_text += f"‚Ä¢ –ú–æ–¥–µ–ª—å: {model_name}\n"
    profile_text += f"‚Ä¢ –Ø–∑—ã–∫: {language_name}\n"
    profile_text += f"‚Ä¢ –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {has_custom_prompt}\n\n"
    
    profile_text += f"<b>üì¢ –ü–æ–¥–ø–∏—Å–∫–∏:</b>\n"
    profile_text += f"‚Ä¢ Axis Messenger: {'‚úÖ' if channel_subscribed else '‚ùå'}\n"
    profile_text += f"‚Ä¢ Axis Messenger Dev: {'‚úÖ' if chat_subscribed else '‚ùå'}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
    if user_id in OWNER_IDS:
        profile_text += f"\n<b>üëë –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞:</b>\n"
        profile_text += f"‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        profile_text += f"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º\n"
        profile_text += f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        profile_text += f"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á—ë—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º"
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if user_id not in OWNER_IDS:
        builder.button(text="üìä –õ–∏–º–∏—Ç—ã", callback_data="show_limits_profile")
        builder.button(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="show_settings_profile")
        builder.button(text="üì¢ –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="check_subscriptions")
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ (–µ—Å–ª–∏ —Å–º–æ—Ç—Ä—è—Ç —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å)
    if user_id in OWNER_IDS:
        builder.button(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats_profile")
        builder.button(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="show_admin_panel")
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)
    if is_banned and user_id not in OWNER_IDS:
        builder.button(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º", url=f"https://t.me/{OWNER_IDS[0] if OWNER_IDS else 'admin'}")
    
    if builder.buttons:
        builder.adjust(2, 1)
        await safe_send_message(message.bot, chat_id, profile_text, 
                              reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    else:
        await safe_send_message(message.bot, chat_id, profile_text, parse_mode=ParseMode.HTML)

@dp.message(Command("models"))
async def cmd_models(message: types.Message, command: CommandObject):
    builder = InlineKeyboardBuilder()
    for k, v in AVAILABLE_MODELS.items():
        builder.button(text=k, callback_data=f"setmodel|{v['id']}")
    text = "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:</b>\n" + "\n\n".join([
        f"<b>{k}</b>: <i>{v['id']}</i>\n{v['desc']}" for k, v in AVAILABLE_MODELS.items()
    ])
    await message.answer(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)

@dp.callback_query(F.data.startswith("setmodel|"))
async def cb_setmodel(callback: types.CallbackQuery):
    model = callback.data.split("|", 1)[1]
    set_user_model(callback.from_user.id, model)
    model_name = next((k for k, v in AVAILABLE_MODELS.items() if v['id'] == model), model)
    await callback.message.edit_text(f"–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: <b>{model_name}</b>", parse_mode=ParseMode.HTML)
    await callback.answer()

@dp.message(Command("setmodel"))
async def cmd_setmodel(message: types.Message, command: CommandObject):
    if not command.args:
        await safe_send_message(message.bot, message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setmodel &lt;–∫–æ—Ä–æ—Ç–∫–æ–µ_–∏–º—è_–∏–ª–∏_id_–º–æ–¥–µ–ª–∏&gt;", parse_mode=ParseMode.HTML)
        return
    model_key = command.args[0].lower()
    model = AVAILABLE_MODELS.get(model_key, {'id': model_key})['id']
    set_user_model(message.from_user.id, model)
    model_name = next((k for k, v in AVAILABLE_MODELS.items() if v['id'] == model), model)
    await safe_send_message(message.bot, message.chat.id, f"–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: <b>{model_name}</b>", parse_mode=ParseMode.HTML)

@dp.message(Command("go"))
async def cmd_go(message: types.Message, command: CommandObject):
    if message.from_user.id not in OWNER_IDS:
        await safe_send_message(message.bot, message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return
    set_global_bot_enabled(True)
    await safe_send_message(message.bot, message.chat.id, "–ë–æ—Ç —Ç–µ–ø–µ—Ä—å –æ—Ç–≤–µ—á–∞–µ—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

@dp.message(Command("stop"))
async def cmd_stop(message: types.Message, command: CommandObject):
    if message.from_user.id not in OWNER_IDS:
        await safe_send_message(message.bot, message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return
    set_global_bot_enabled(False)
    await safe_send_message(message.bot, message.chat.id, "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É.")

@dp.message(Command("broadcast"))
async def cmd_broadcast(message: types.Message, command: CommandObject):
    if message.from_user.id not in OWNER_IDS:
        await safe_send_message(message.bot, message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    if not command.args:
        await safe_send_message(message.bot, message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast &lt;—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è&gt;", parse_mode=ParseMode.HTML)
        return
    text = message.text.partition(' ')[2]
    sent_count = 0
    failed_count = 0
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('SELECT DISTINCT chat_id FROM users')
    users = c.fetchall()
    conn.close()
    status_msg = await safe_send_message(message.bot, message.chat.id, "üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    for user in users:
        try:
            await safe_send_message(message.bot, user[0], text, parse_mode=ParseMode.HTML)
            sent_count += 1
        except Exception as e:
            failed_count += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
    await safe_edit_message(status_msg, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüì§ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n‚ùå –û—à–∏–±–æ–∫: {failed_count}")

@dp.message(Command("stats"))
async def cmd_stats(message: types.Message, command: CommandObject):
    if message.from_user.id not in OWNER_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    # –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    c.execute('SELECT COUNT(DISTINCT user_id) FROM users')
    total_users = c.fetchone()[0]
    # –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    c.execute('SELECT COUNT(*) FROM chat_history WHERE role = "user"')
    total_requests = c.fetchone()[0]
    # –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤
    c.execute('SELECT COUNT(*) FROM chat_history WHERE role = "assistant"')
    total_responses = c.fetchone()[0]
    # –¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    c.execute('''SELECT u.username, ch.user_id, COUNT(*) as msg_count FROM chat_history ch JOIN users u ON ch.user_id = u.user_id WHERE ch.role = "user" GROUP BY ch.user_id ORDER BY msg_count DESC LIMIT 5''')
    top_users = c.fetchall()
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º (7 –¥–Ω–µ–π)
    c.execute('''SELECT date(substr(rowid,1,10), 'unixepoch'), COUNT(*) FROM chat_history WHERE role = "user" GROUP BY date(substr(rowid,1,10), 'unixepoch') ORDER BY date(substr(rowid,1,10), 'unixepoch') DESC LIMIT 7''')
    days = c.fetchall()
    # –ü–æ –≥—Ä—É–ø–ø–∞–º (—Ç–æ–ø-5)
    c.execute('''SELECT chat_id, COUNT(*) as cnt FROM users WHERE chat_id < 0 GROUP BY chat_id ORDER BY cnt DESC LIMIT 5''')
    top_groups = c.fetchall()
    # –õ–∞–π–∫–∏/–¥–∏–∑–ª–∞–π–∫–∏
    c.execute('''SELECT feedback, COUNT(*) FROM feedback GROUP BY feedback''')
    fb_stats = dict(c.fetchall())
    # –¢–æ–ø-–æ—Ç–≤–µ—Ç—ã –ø–æ –ª–∞–π–∫–∞–º
    c.execute('''SELECT message_id, COUNT(*) as cnt FROM feedback WHERE feedback = 'like' GROUP BY message_id ORDER BY cnt DESC LIMIT 3''')
    top_liked = c.fetchall()
    conn.close()
    stats_text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üí¨ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n"
        f"‚úÖ –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {total_responses}\n\n"
        "üèÜ <b>–¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
    )
    for i, (username, uid, count) in enumerate(top_users, 1):
        stats_text += f"{i}. @{username or uid}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    stats_text += "\nüìÖ <b>–ó–∞–ø—Ä–æ—Å—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:</b>\n"
    for day, cnt in days:
        stats_text += f"{day}: {cnt}\n"
    stats_text += "\nüë• <b>–¢–æ–ø-5 –≥—Ä—É–ø–ø:</b>\n"
    for i, (gid, cnt) in enumerate(top_groups, 1):
        stats_text += f"{i}. <code>{gid}</code>: {cnt} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    stats_text += "\nüëç <b>–õ–∞–π–∫–∏:</b> {0}   üëé <b>–î–∏–∑–ª–∞–π–∫–∏:</b> {1}\n".format(fb_stats.get('like', 0), fb_stats.get('dislike', 0))
    stats_text += "\nüî• <b>–¢–æ–ø-3 –æ—Ç–≤–µ—Ç–∞ –ø–æ –ª–∞–π–∫–∞–º:</b>\n"
    for mid, cnt in top_liked:
        stats_text += f"–û—Ç–≤–µ—Ç message_id={mid}: {cnt} üëç\n"
    await message.answer(stats_text, parse_mode=ParseMode.HTML)

@dp.message(Command("block"))
async def cmd_block(message: types.Message, command: CommandObject):
    if message.from_user.id not in OWNER_IDS:
        await safe_send_message(message.bot, message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return
    if message.reply_to_message:
        target_user = message.reply_to_message.from_user
        add_to_blacklist(target_user.id)
        await safe_send_message(message.bot, message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.mention_html()} (ID: <code>{target_user.id}</code>) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.", parse_mode=ParseMode.HTML)
        return
    if command.args:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            parts = message.text.split()
            if len(parts) > 1:
                target_id = int(parts[1])
            else:
                target_id = int(command.args[0])
            
            add_to_blacklist(target_id)
            await safe_send_message(message.bot, message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{target_id}</code> –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.", parse_mode=ParseMode.HTML)
        except Exception as e:
            await safe_send_message(message.bot, message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /block &lt;id&gt; –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", parse_mode=ParseMode.HTML)
        return
    await safe_send_message(message.bot, message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /block &lt;id&gt; –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", parse_mode=ParseMode.HTML)

@dp.message(Command("unblock"))
async def cmd_unblock(message: types.Message, command: CommandObject):
    if message.from_user.id not in OWNER_IDS:
        await safe_send_message(message.bot, message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return
    if message.reply_to_message:
        target_user = message.reply_to_message.from_user
        remove_from_blacklist(target_user.id)
        await safe_send_message(message.bot, message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.mention_html()} (ID: <code>{target_user.id}</code>) —É–¥–∞–ª—ë–Ω –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.", parse_mode=ParseMode.HTML)
        return
    if command.args:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            parts = message.text.split()
            if len(parts) > 1:
                target_id = int(parts[1])
            else:
                target_id = int(command.args[0])
            
            remove_from_blacklist(target_id)
            await safe_send_message(message.bot, message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{target_id}</code> —É–¥–∞–ª—ë–Ω –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.", parse_mode=ParseMode.HTML)
        except Exception:
            await safe_send_message(message.bot, message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unblock &lt;id&gt; –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", parse_mode=ParseMode.HTML)
        return
    await safe_send_message(message.bot, message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unblock &lt;id&gt; –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", parse_mode=ParseMode.HTML)

@dp.message(Command("migrate"))
async def cmd_migrate(message: types.Message, command: CommandObject):
    if message.from_user.id not in OWNER_IDS:
        await safe_send_message(message.bot, message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return
    await safe_send_message(message.bot, message.chat.id, "üîÑ –ó–∞–ø—É—Å–∫–∞—é –º–∏–≥—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π...")
    migrate_old_models()
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('SELECT DISTINCT model FROM user_models')
    user_models = [row[0] for row in c.fetchall()]
    invalid_models = []
    for model in user_models:
        if model not in [v['id'] for v in AVAILABLE_MODELS.values()]:
            invalid_models.append(model)
    conn.close()
    if invalid_models:
        await safe_send_message(message.bot, message.chat.id, f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏:\n{', '.join(invalid_models)}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setmodel –¥–ª—è —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–µ–π —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    else:
        await safe_send_message(message.bot, message.chat.id, "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –í—Å–µ –º–æ–¥–µ–ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã.")

@dp.message(Command("export_chats"))
async def cmd_export_chats(message: types.Message, command: CommandObject):
    if message.from_user.id not in OWNER_IDS:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('SELECT DISTINCT user_id FROM chat_history')
    user_ids = [row[0] for row in c.fetchall()]
    temp_dir = tempfile.mkdtemp()
    file_paths = []
    for uid in user_ids:
        c.execute('SELECT username FROM users WHERE user_id = ?', (uid,))
        u = c.fetchone()
        username = u[0] if u and u[0] else str(uid)
        c.execute('SELECT message_id, role, content FROM chat_history WHERE user_id = ? ORDER BY message_id', (uid,))
        rows = c.fetchall()
        if not rows:
            continue
        safe_username = username.replace(' ', '_').replace('@', '')
        file_name = f"{safe_username}_{uid}.txt"
        file_path = os.path.join(temp_dir, file_name)
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(f"user_id: {uid}\nusername: {username}\n\n")
            for mid, role, content in rows:
                f.write(f"{role}: {content}\n")
        file_paths.append(file_path)
    conn.close()
    if not file_paths:
        await message.answer("–ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return
    # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º
    zip_path = os.path.join(temp_dir, "chats_export.zip")
    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for file_path in file_paths:
            zipf.write(file_path, os.path.basename(file_path))
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤
    input_file = FSInputFile(zip_path, filename="chats_export.zip")
    await message.answer_document(document=input_file, caption="–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —á–∞—Ç–æ–≤")
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫—É
    for file_path in file_paths:
        os.remove(file_path)
    os.remove(zip_path)
    os.rmdir(temp_dir)
    await message.answer("–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")

# --- /history —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π ---

@dp.message(Command("history"))
async def cmd_history(message: types.Message, command: CommandObject):
    user_id = message.from_user.id
    page = 1
    await send_history_page(message, user_id, page)

@dp.callback_query(F.data.startswith("history|"))
async def cb_history(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    _, page = callback.data.split("|", 1)
    page = int(page)
    await send_history_page(callback.message, user_id, page, callback=callback)

async def send_history_page(msg_obj, user_id, page, callback=None):
    PAGE_SIZE = 10
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('SELECT role, content FROM chat_history WHERE user_id = ? ORDER BY message_id DESC', (user_id,))
    all_msgs = c.fetchall()
    conn.close()
    total = len(all_msgs)
    pages = max(1, math.ceil(total / PAGE_SIZE))
    page = max(1, min(page, pages))
    start = (page - 1) * PAGE_SIZE
    end = start + PAGE_SIZE
    msgs = all_msgs[start:end]
    if not msgs:
        text = "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞."
    else:
        text = f"<b>–ò—Å—Ç–æ—Ä–∏—è ({start+1}-{min(end,total)} –∏–∑ {total}):</b>\n\n"
        for role, content in reversed(msgs):
            who = "üë§" if role == "user" else "ü§ñ"
            text += f"{who} <i>{role}</i>: {content}\n\n"
    builder = InlineKeyboardBuilder()
    if page > 1:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"history|{page-1}")
    if page < pages:
        builder.button(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"history|{page+1}")
    if callback:
        await callback.answer()
        await msg_obj.edit_text(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    else:
        await msg_obj.answer(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.message(F.text & ~F.text.startswith("/"))
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    username = message.from_user.username or "Unknown"
    is_private = message.chat.type == "private"
    # –í –≥—Ä—É–ø–ø–∞—Ö –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ reply –∫ –±–æ—Ç—É
    if not is_private:
        if not message.reply_to_message or message.reply_to_message.from_user.id != (await message.bot.me()).id:
            return
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–æ–ø
    if not is_global_bot_enabled() and user_id not in OWNER_IDS:
        return
    # –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if is_blacklisted(user_id):
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    daily_limit = await get_user_daily_limit(message.bot, user_id)
    current_usage = get_user_limit(user_id)
    if current_usage >= daily_limit:
        builder = InlineKeyboardBuilder()
        builder.button(text="üì¢ Axis Messenger", url="https://t.me/Axis_Messenger")
        builder.button(text="üíª Axis Messenger Dev", url="https://t.me/AxisMessengerDev")
        builder.button(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="check_subscriptions")
        builder.adjust(2, 1)
        
        await safe_send_message(message.bot, chat_id, 
            f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ({current_usage}/{daily_limit}).\n\n"
            "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞:",
            reply_markup=builder.as_markup())
        return
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    increment_user_limit(user_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('INSERT INTO chat_history (user_id, message_id, role, content) VALUES (?, ?, ?, ?)', (user_id, message.message_id, 'user', message.text))
    conn.commit()
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 20 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    c.execute('SELECT message_id FROM chat_history WHERE user_id = ? ORDER BY message_id DESC', (user_id,))
    all_ids = [row[0] for row in c.fetchall()]
    if len(all_ids) > 20:
        to_delete = all_ids[20:]
        c.executemany('DELETE FROM chat_history WHERE user_id = ? AND message_id = ?', [(user_id, mid) for mid in to_delete])
        conn.commit()
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    c.execute('SELECT content FROM chat_history WHERE user_id = ? ORDER BY message_id DESC LIMIT 5', (user_id,))
    history = c.fetchall()

    user_prompt = get_user_systemprompt(user_id)
    if user_prompt:
        system_prompt = user_prompt
    else:
        system_prompt = "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–æ–º —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ç–µ–±–µ –Ω–∞–ø–∏—Å–∞–ª–∏,  –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –ø—Ä–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å Telegram, –µ—Å–ª–∏ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –Ω–∞–ø—Ä—è–º—É—é."
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": message.text}
    ]
    for msg in reversed(history):
        messages.append({"role": "user", "content": msg[0]})
    cached = get_cached_answer(user_id, message.text)
    if cached:
        await safe_send_message(message.bot, chat_id, cached, parse_mode=ParseMode.HTML)
        conn.close()
        return
    model = get_user_model(user_id) or DEFAULT_MODEL
    data = {"model": model, "messages": messages}
    status_msg = await safe_send_message(message.bot, chat_id, "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
    try:
        timeout = aiohttp.ClientTimeout(total=90)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            headers = {
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "HTTP-Referer": "https://github.com/your-repo",
                "X-Title": "DeepSeek Telegram Bot"
            }
            async with session.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                json=data
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    ai_response = result['choices'][0]['message']['content']
                    formatted_response = convert_markdown_to_telegram(ai_response)
                    c.execute('INSERT INTO chat_history (user_id, message_id, role, content) VALUES (?, ?, ?, ?)', (user_id, status_msg.message_id, 'assistant', ai_response))
                    conn.commit()
                    await safe_edit_message(status_msg, formatted_response, parse_mode=ParseMode.HTML)
                    set_cached_answer(user_id, message.text, formatted_response)
                    log_event('api_success', f'–û—Ç–≤–µ—Ç: {formatted_response[:100]}...', user_id, username)
                else:
                    error_text = await response.text()
                    logger.error(f"API Error: {error_text}")
                    await safe_edit_message(status_msg, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    log_event('api_error', error_text, user_id, username)
    except asyncio.TimeoutError:
        logger.error("Timeout while waiting for API response")
        await safe_edit_message(status_msg, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        log_event('timeout', '–¢–∞–π–º–∞—É—Ç API', user_id, username)
    except Exception as e:
        logger.error(f"Error: {str(e)}")
        await safe_edit_message(status_msg, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        log_event('critical', str(e), user_id, username)
    finally:
        conn.close()

    # --- –ö–Ω–æ–ø–∫–∞ ‚ÄúüîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å‚Äù ---
    builder = InlineKeyboardBuilder()
    builder.button(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"repeat|{message.message_id}")
    builder.button(text="üåê –ü–µ—Ä–µ–≤–µ—Å—Ç–∏", callback_data=f"translate|{status_msg.message_id}")
    builder.button(text="üëç", callback_data=f"fb|like|{status_msg.message_id}")
    builder.button(text="üëé", callback_data=f"fb|dislike|{status_msg.message_id}")
    builder.button(text="üóÇ –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å –¥–∏–∞–ª–æ–≥", callback_data="showhistory")
    builder.adjust(5)
    await message.answer(
        formatted_response,
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )
    await status_msg.delete()

# --- –ö–Ω–æ–ø–∫–∞ ‚ÄúüîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å‚Äù ---
@dp.callback_query(F.data.startswith("repeat|"))
async def cb_repeat(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    _, msg_id = callback.data.split("|", 1)
    # –î–æ—Å—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ chat_history –ø–æ message_id –∏ role='user'
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('SELECT content FROM chat_history WHERE message_id = ? AND role = ?', (int(msg_id), 'user'))
    orig_msg_text = c.fetchone()[0]
    conn.close()
    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –±—É–¥—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª
    # –°–æ–∑–¥–∞—ë–º —Ñ–µ–π–∫–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Message —Å –Ω—É–∂–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    class FakeMessage:
        def __init__(self, text, user_id, chat_id, bot):
            self.text = text
            self.from_user = type('User', (), {'id': user_id})()
            self.chat = type('Chat', (), {'id': chat_id, 'type': 'private'})()
            self.bot = bot
            self.message_id = 0
    fake_message = FakeMessage(orig_msg_text, user_id, callback.message.chat.id, callback.bot)
    await handle_message(fake_message)
    await callback.answer("–ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞")

# --- –ö–Ω–æ–ø–∫–∞ ‚Äúüåê –ü–µ—Ä–µ–≤–µ—Å—Ç–∏‚Äù ---
@dp.callback_query(F.data.startswith("translate|"))
async def cb_translate(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    _, msg_id = callback.data.split("|", 1)
    # –î–æ—Å—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ chat_history –ø–æ message_id –∏ role='assistant'
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('SELECT content FROM chat_history WHERE message_id = ? AND role = ?', (int(msg_id), 'assistant'))
    orig_answer_text = c.fetchone()[0]
    conn.close()
    lang = get_user_language(user_id)
    lang_name = LANGUAGES.get(lang, lang)
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    try:
        detected_lang = detect(orig_answer_text)
    except Exception:
        detected_lang = None
    if detected_lang and detected_lang == lang:
        await callback.message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ.")
        await callback.answer()
        return
    # –§–æ—Ä–º–∏—Ä—É–µ–º prompt –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ {lang_name}: {orig_answer_text}"
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ –º–µ—Ö–∞–Ω–∏–∑–º, —á—Ç–æ –∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–æ —Å system prompt = '–¢—ã –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫...'
    data = {
        "model": get_user_model(user_id) or DEFAULT_MODEL,
        "messages": [
            {"role": "system", "content": f"–¢—ã –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫. –ü–µ—Ä–µ–≤–æ–¥–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ {lang_name}. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ."},
            {"role": "user", "content": orig_answer_text}
        ]
    }
    status_msg = await callback.message.answer("üåê –ü–µ—Ä–µ–≤–æ–∂—É...")
    try:
        timeout = aiohttp.ClientTimeout(total=60)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            headers = {
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "HTTP-Referer": "https://github.com/your-repo",
                "X-Title": "DeepSeek Telegram Bot"
            }
            async with session.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                json=data
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    translation = result['choices'][0]['message']['content']
                    await status_msg.edit_text(f"üåê –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {lang_name}:\n{translation}")
                else:
                    await status_msg.edit_text("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception:
        await status_msg.edit_text("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.answer("–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω")

# --- –õ–∏–º–∏—Ç—ã –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏ ---
SPONSOR_CHANNEL_ID = -1002380153628
SPONSOR_CHAT_ID = -1002676367535
BASE_LIMIT = 1000
CHANNEL_BONUS = 500
CHAT_BONUS = 500

# –¢–∞–±–ª–∏—Ü–∞ user_limits: user_id, date, count

def get_today():
    return datetime.date.today().isoformat()

def get_user_limit(user_id):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('CREATE TABLE IF NOT EXISTS user_limits (user_id INTEGER, date TEXT, count INTEGER, PRIMARY KEY(user_id, date))')
    c.execute('SELECT count FROM user_limits WHERE user_id = ? AND date = ?', (user_id, get_today()))
    row = c.fetchone()
    conn.close()
    return row[0] if row else 0

def increment_user_limit(user_id):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('CREATE TABLE IF NOT EXISTS user_limits (user_id INTEGER, date TEXT, count INTEGER, PRIMARY KEY(user_id, date))')
    today = get_today()
    c.execute('SELECT count FROM user_limits WHERE user_id = ? AND date = ?', (user_id, today))
    row = c.fetchone()
    if row:
        c.execute('UPDATE user_limits SET count = count + 1 WHERE user_id = ? AND date = ?', (user_id, today))
    else:
        c.execute('INSERT INTO user_limits (user_id, date, count) VALUES (?, ?, 1)', (user_id, today))
    conn.commit()
    conn.close()

async def get_user_daily_limit(bot, user_id):
    limit = BASE_LIMIT
    try:
        member = await bot.get_chat_member(SPONSOR_CHANNEL_ID, user_id)
        if member.status in ("member", "administrator", "creator"):
            limit += CHANNEL_BONUS
    except Exception:
        pass
    try:
        member = await bot.get_chat_member(SPONSOR_CHAT_ID, user_id)
        if member.status in ("member", "administrator", "creator"):
            limit += CHAT_BONUS
    except Exception:
        pass
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('CREATE TABLE IF NOT EXISTS user_custom_limits (user_id INTEGER PRIMARY KEY, custom_limit INTEGER)')
    c.execute('SELECT custom_limit FROM user_custom_limits WHERE user_id = ?', (user_id,))
    row = c.fetchone()
    if row and row[0]:
        limit = row[0]
    conn.close()
    return limit

# --- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
CACHE_DAYS = 3

def get_cached_answer(user_id, question):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS cache (
        user_id INTEGER,
        question TEXT,
        answer TEXT,
        date TEXT
    )''')
    cutoff = (datetime.date.today() - datetime.timedelta(days=CACHE_DAYS)).isoformat()
    c.execute('''SELECT answer FROM cache WHERE user_id = ? AND question = ? AND date >= ? ORDER BY date DESC LIMIT 1''', (user_id, question, cutoff))
    row = c.fetchone()
    conn.close()
    return row[0] if row else None

def set_cached_answer(user_id, question, answer):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    today = datetime.date.today().isoformat()
    c.execute('''INSERT INTO cache (user_id, question, answer, date) VALUES (?, ?, ?, ?)''', (user_id, question, answer, today))
    conn.commit()
    conn.close()

# --- /language: –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
LANGUAGES = {
    'ru': '–†—É—Å—Å–∫–∏–π',
    'en': 'English',
    'uk': '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
    'de': 'Deutsch',
    'fr': 'Fran√ßais',
    'es': 'Espa√±ol',
    'it': 'Italiano',
    'zh': '‰∏≠Êñá',
    'tr': 'T√ºrk√ße',
    # –∏ —Ç.–¥.
}

def set_user_language(user_id, lang):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('ALTER TABLE users ADD COLUMN language TEXT')
    try:
        c.execute('UPDATE users SET language = ? WHERE user_id = ?', (lang, user_id))
    except Exception:
        c.execute('INSERT OR IGNORE INTO users (user_id, language) VALUES (?, ?)', (user_id, lang))
    conn.commit()
    conn.close()

def get_user_language(user_id):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    try:
        c.execute('SELECT language FROM users WHERE user_id = ?', (user_id,))
        row = c.fetchone()
        if row and row[0]:
            return row[0]
    except Exception:
        pass
    conn.close()
    return 'ru'

# --- /systemprompt: –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def set_user_systemprompt(user_id, prompt):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('ALTER TABLE users ADD COLUMN systemprompt TEXT')
    try:
        c.execute('UPDATE users SET systemprompt = ? WHERE user_id = ?', (prompt, user_id))
    except Exception:
        c.execute('INSERT OR IGNORE INTO users (user_id, systemprompt) VALUES (?, ?)', (user_id, prompt))
    conn.commit()
    conn.close()

def get_user_systemprompt(user_id):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    try:
        c.execute('SELECT systemprompt FROM users WHERE user_id = ?', (user_id,))
        row = c.fetchone()
        if row and row[0]:
            return row[0]
    except Exception:
        pass
    conn.close()
    return None

@dp.message(Command("systemprompt"))
async def cmd_systemprompt(message: types.Message, command: CommandObject):
    user_id = message.from_user.id
    if not command.args:
        prompt = get_user_systemprompt(user_id)
        if prompt:
            await message.answer(f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:\n<code>{prompt}</code>", parse_mode=ParseMode.HTML)
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ –∑–∞–¥–∞–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /systemprompt <—Ç–µ–∫—Å—Ç>")
        return
    prompt = " ".join(command.args)
    set_user_systemprompt(user_id, prompt)
    await message.answer("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –æ–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∫ –∫–∞–∂–¥–æ–º—É –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")

@dp.message(Command("language"))
async def cmd_language(message: types.Message, command: CommandObject):
    user_id = message.from_user.id
    builder = InlineKeyboardBuilder()
    for code, name in LANGUAGES.items():
        builder.button(text=name, callback_data=f"setlang|{code}")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ / Choose your language:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data.startswith("setlang|"))
async def cb_setlang(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    _, lang = callback.data.split("|", 1)
    set_user_language(user_id, lang)
    await callback.answer()
    await callback.message.edit_text(
        "–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–∑–º–µ–Ω—ë–Ω! / Language changed!",
        reply_markup=None
    )

@dp.callback_query(F.data == "check_subscriptions")
async def cb_check_subscriptions(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
    channel_subscribed = False
    chat_subscribed = False
    
    try:
        member = await callback.bot.get_chat_member(SPONSOR_CHANNEL_ID, user_id)
        if member.status in ("member", "administrator", "creator"):
            channel_subscribed = True
    except Exception:
        pass
    
    try:
        member = await callback.bot.get_chat_member(SPONSOR_CHAT_ID, user_id)
        if member.status in ("member", "administrator", "creator"):
            chat_subscribed = True
    except Exception:
        pass
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã
    daily_limit = await get_user_daily_limit(callback.bot, user_id)
    current_usage = get_user_limit(user_id)
    
    if channel_subscribed and chat_subscribed:
        await callback.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã! –õ–∏–º–∏—Ç —É–≤–µ–ª–∏—á–µ–Ω.", show_alert=True)
        await callback.message.edit_text(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!\n\n"
            f"–í–∞—à –ª–∏–º–∏—Ç: {current_usage}/{daily_limit}\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.",
            reply_markup=None
        )
    elif channel_subscribed or chat_subscribed:
        await callback.answer("‚ö†Ô∏è –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞.", show_alert=True)
        builder = InlineKeyboardBuilder()
        if not channel_subscribed:
            builder.button(text="üì¢ Axis Messenger", url="https://t.me/Axis_Messenger")
        if not chat_subscribed:
            builder.button(text="üíª Axis Messenger Dev", url="https://t.me/AxisMessengerDev")
        builder.button(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_subscriptions")
        builder.adjust(2, 1)
        
        await callback.message.edit_text(
            f"‚ö†Ô∏è –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞.\n\n"
            f"–í–∞—à –ª–∏–º–∏—Ç: {current_usage}/{daily_limit}",
            reply_markup=builder.as_markup()
        )
    else:
        await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
        builder = InlineKeyboardBuilder()
        builder.button(text="üì¢ Axis Messenger", url="https://t.me/Axis_Messenger")
        builder.button(text="üíª Axis Messenger Dev", url="https://t.me/AxisMessengerDev")
        builder.button(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_subscriptions")
        builder.adjust(2, 1)
        
        await callback.message.edit_text(
            f"‚ùå –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
            f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞.\n"
            f"–í–∞—à –ª–∏–º–∏—Ç: {current_usage}/{daily_limit}",
            reply_markup=builder.as_markup()
        )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è ---
@dp.callback_query(F.data == "show_limits_profile")
async def cb_show_limits_profile(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã
    daily_limit = await get_user_daily_limit(callback.bot, user_id)
    current_usage = get_user_limit(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
    channel_subscribed = False
    chat_subscribed = False
    
    try:
        member = await callback.bot.get_chat_member(SPONSOR_CHANNEL_ID, user_id)
        if member.status in ("member", "administrator", "creator"):
            channel_subscribed = True
    except Exception:
        pass
    
    try:
        member = await callback.bot.get_chat_member(SPONSOR_CHAT_ID, user_id)
        if member.status in ("member", "administrator", "creator"):
            chat_subscribed = True
    except Exception:
        pass
    
    status_text = f"üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö:</b>\n\n"
    status_text += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {current_usage}/{daily_limit}\n"
    status_text += f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {daily_limit - current_usage}\n\n"
    
    if channel_subscribed and chat_subscribed:
        status_text += "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏: –û–±–∞ –∫–∞–Ω–∞–ª–∞\n"
        status_text += f"–ë–æ–Ω—É—Å: +{CHANNEL_BONUS + CHAT_BONUS} –∑–∞–ø—Ä–æ—Å–æ–≤"
    elif channel_subscribed:
        status_text += "‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∏: –¢–æ–ª—å–∫–æ Axis Messenger\n"
        status_text += f"–ë–æ–Ω—É—Å: +{CHANNEL_BONUS} –∑–∞–ø—Ä–æ—Å–æ–≤"
    elif chat_subscribed:
        status_text += "‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∏: –¢–æ–ª—å–∫–æ Axis Messenger Dev\n"
        status_text += f"–ë–æ–Ω—É—Å: +{CHAT_BONUS} –∑–∞–ø—Ä–æ—Å–æ–≤"
    else:
        status_text += "‚ùå –ü–æ–¥–ø–∏—Å–∫–∏: –ù–µ—Ç\n"
        status_text += "–ë–æ–Ω—É—Å: +0 –∑–∞–ø—Ä–æ—Å–æ–≤"
    
    builder = InlineKeyboardBuilder()
    if not channel_subscribed:
        builder.button(text="üì¢ Axis Messenger", url="https://t.me/Axis_Messenger")
    if not chat_subscribed:
        builder.button(text="üíª Axis Messenger Dev", url="https://t.me/AxisMessengerDev")
    builder.button(text="üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile")
    builder.adjust(2, 1)
    
    await callback.message.edit_text(status_text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    await callback.answer()

@dp.callback_query(F.data == "show_settings_profile")
async def cb_show_settings_profile(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_model = get_user_model(user_id) or DEFAULT_MODEL
    model_name = next((k for k, v in AVAILABLE_MODELS.items() if v['id'] == user_model), user_model)
    
    user_language = get_user_language(user_id)
    language_name = LANGUAGES.get(user_language, user_language)
    
    system_prompt = get_user_systemprompt(user_id)
    has_custom_prompt = "‚úÖ –î–∞" if system_prompt else "‚ùå –ù–µ—Ç"
    
    settings_text = f"üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n"
    settings_text += f"<b>–ú–æ–¥–µ–ª—å:</b> {model_name}\n"
    settings_text += f"<b>–Ø–∑—ã–∫:</b> {language_name}\n"
    settings_text += f"<b>–ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:</b> {has_custom_prompt}\n\n"
    
    if system_prompt:
        settings_text += f"<b>–í–∞—à –ø—Ä–æ–º–ø—Ç:</b>\n<code>{system_prompt[:100]}{'...' if len(system_prompt) > 100 else ''}</code>\n\n"
    
    settings_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:\n"
    settings_text += "‚Ä¢ /models ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å\n"
    settings_text += "‚Ä¢ /language ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫\n"
    settings_text += "‚Ä¢ /systemprompt ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile")
    
    await callback.message.edit_text(settings_text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    await callback.answer()

@dp.callback_query(F.data == "show_stats_profile")
async def cb_show_stats_profile(callback: types.CallbackQuery):
    if callback.from_user.id not in OWNER_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('SELECT COUNT(DISTINCT user_id) FROM users')
    total_users = c.fetchone()[0] or 0
    c.execute('SELECT COUNT(*) FROM chat_history WHERE role = "user"')
    total_requests = c.fetchone()[0] or 0
    c.execute('SELECT COUNT(*) FROM chat_history WHERE role = "assistant"')
    total_responses = c.fetchone()[0] or 0
    conn.close()
    
    stats_text = f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
    stats_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
    stats_text += f"üí¨ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n"
    stats_text += f"‚úÖ –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {total_responses}\n"
    stats_text += f"üìä –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {total_requests // max(total_users, 1)} –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile")
    
    await callback.message.edit_text(stats_text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    await callback.answer()

@dp.callback_query(F.data == "show_admin_panel")
async def cb_show_admin_panel(callback: types.CallbackQuery):
    if callback.from_user.id not in OWNER_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    admin_text = f"‚öôÔ∏è <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n\n"
    admin_text += f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
    admin_text += f"‚Ä¢ /stats ‚Äî –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
    admin_text += f"‚Ä¢ /broadcast ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞\n"
    admin_text += f"‚Ä¢ /block ‚Äî –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
    admin_text += f"‚Ä¢ /unblock ‚Äî —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
    admin_text += f"‚Ä¢ /blacklist ‚Äî —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫\n"
    admin_text += f"‚Ä¢ /chats ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    admin_text += f"‚Ä¢ /go ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
    admin_text += f"‚Ä¢ /stop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n"
    admin_text += f"‚Ä¢ /migrate ‚Äî –º–∏–≥—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π\n"
    admin_text += f"‚Ä¢ /export_chats ‚Äî —ç–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–æ–≤"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile")
    
    await callback.message.edit_text(admin_text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    await callback.answer()

@dp.callback_query(F.data == "back_to_profile")
async def cb_back_to_profile(callback: types.CallbackQuery):
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /profile
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    username = callback.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
    first_name = callback.from_user.first_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    last_name = callback.from_user.last_name or ""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in OWNER_IDS:
        status = "üëë –í–ª–∞–¥–µ–ª–µ—Ü"
        status_emoji = "üëë"
    elif callback.from_user.id == (await callback.bot.me()).id:
        status = "ü§ñ –ë–æ—Ç"
        status_emoji = "ü§ñ"
    else:
        status = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        status_emoji = "üë§"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
    is_banned = is_blacklisted(user_id)
    ban_status = "üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if is_banned else "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö
    daily_limit = await get_user_daily_limit(callback.bot, user_id)
    current_usage = get_user_limit(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
    channel_subscribed = False
    chat_subscribed = False
    
    try:
        member = await callback.bot.get_chat_member(SPONSOR_CHANNEL_ID, user_id)
        if member.status in ("member", "administrator", "creator"):
            channel_subscribed = True
    except Exception:
        pass
    
    try:
        member = await callback.bot.get_chat_member(SPONSOR_CHAT_ID, user_id)
        if member.status in ("member", "administrator", "creator"):
            chat_subscribed = True
    except Exception:
        pass
    
    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_model = get_user_model(user_id) or DEFAULT_MODEL
    model_name = next((k for k, v in AVAILABLE_MODELS.items() if v['id'] == user_model), user_model)
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_language = get_user_language(user_id)
    language_name = LANGUAGES.get(user_language, user_language)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    system_prompt = get_user_systemprompt(user_id)
    has_custom_prompt = "‚úÖ –î–∞" if system_prompt else "‚ùå –ù–µ—Ç"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('SELECT COUNT(*) FROM chat_history WHERE user_id = ? AND role = "user"', (user_id,))
    messages_count = c.fetchone()[0] or 0
    c.execute('SELECT COUNT(*) FROM chat_history WHERE user_id = ? AND role = "assistant"', (user_id,))
    responses_count = c.fetchone()[0] or 0
    conn.close()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    profile_text = f"<b>{status_emoji} –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
    profile_text += f"<b>ID:</b> <code>{user_id}</code>\n"
    profile_text += f"<b>–ò–º—è:</b> {first_name} {last_name}\n"
    profile_text += f"<b>Username:</b> @{username}\n"
    profile_text += f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
    profile_text += f"<b>–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞:</b> {ban_status}\n\n"
    
    profile_text += f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    profile_text += f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {messages_count}\n"
    profile_text += f"‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {responses_count}\n"
    profile_text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {current_usage}/{daily_limit}\n\n"
    
    profile_text += f"<b>üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
    profile_text += f"‚Ä¢ –ú–æ–¥–µ–ª—å: {model_name}\n"
    profile_text += f"‚Ä¢ –Ø–∑—ã–∫: {language_name}\n"
    profile_text += f"‚Ä¢ –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {has_custom_prompt}\n\n"
    
    profile_text += f"<b>üì¢ –ü–æ–¥–ø–∏—Å–∫–∏:</b>\n"
    profile_text += f"‚Ä¢ Axis Messenger: {'‚úÖ' if channel_subscribed else '‚ùå'}\n"
    profile_text += f"‚Ä¢ Axis Messenger Dev: {'‚úÖ' if chat_subscribed else '‚ùå'}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
    if user_id in OWNER_IDS:
        profile_text += f"\n<b>üëë –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞:</b>\n"
        profile_text += f"‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        profile_text += f"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º\n"
        profile_text += f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        profile_text += f"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á—ë—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º"
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if user_id not in OWNER_IDS:
        builder.button(text="üìä –õ–∏–º–∏—Ç—ã", callback_data="show_limits_profile")
        builder.button(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="show_settings_profile")
        builder.button(text="üì¢ –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="check_subscriptions")
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ (–µ—Å–ª–∏ —Å–º–æ—Ç—Ä—è—Ç —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å)
    if user_id in OWNER_IDS:
        builder.button(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats_profile")
        builder.button(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="show_admin_panel")
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)
    if is_banned and user_id not in OWNER_IDS:
        builder.button(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º", url=f"https://t.me/{OWNER_IDS[0] if OWNER_IDS else 'admin'}")
    
    if builder.buttons:
        builder.adjust(2, 1)
        await callback.message.edit_text(profile_text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    else:
        await callback.message.edit_text(profile_text, parse_mode=ParseMode.HTML)
    
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–∞—Ç–æ–≤ ---
@dp.callback_query(F.data.startswith("view_chat|"))
async def cb_view_chat(callback: types.CallbackQuery):
    if callback.from_user.id not in OWNER_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    _, user_id, page = callback.data.split("|")
    user_id = int(user_id)
    page = int(page)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('SELECT username FROM users WHERE user_id = ?', (user_id,))
    user_info = c.fetchone()
    username = user_info[0] if user_info else f"ID: {user_id}"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    c.execute('''
        SELECT role, content, message_id 
        FROM chat_history 
        WHERE user_id = ? 
        ORDER BY message_id DESC 
        LIMIT 10 OFFSET ?
    ''', (user_id, (page - 1) * 10))
    messages = c.fetchall()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    c.execute('SELECT COUNT(*) FROM chat_history WHERE user_id = ?', (user_id,))
    total_messages = c.fetchone()[0]
    conn.close()
    
    if not messages:
        await callback.answer("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —á–∞—Ç–∞
    chat_text = f"üí¨ <b>–ß–∞—Ç —Å {username}</b>\n"
    chat_text += f"üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
    chat_text += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {max(1, (total_messages + 9) // 10)}\n\n"
    
    for role, content, msg_id in reversed(messages):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
        if role == "user":
            chat_text += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n{content[:200]}{'...' if len(content) > 200 else ''}\n\n"
        else:
            chat_text += f"ü§ñ <b>–ë–æ—Ç:</b>\n{content[:200]}{'...' if len(content) > 200 else ''}\n\n"
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    builder = InlineKeyboardBuilder()
    
    if page > 1:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_chat|{user_id}|{page-1}")
    
    if page < (total_messages + 9) // 10:
        builder.button(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"view_chat|{user_id}|{page+1}")
    
    builder.button(text="üì± –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤", callback_data="back_to_chats")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")
    
    builder.adjust(2, 2)
    
    await callback.message.edit_text(chat_text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    await callback.answer()

@dp.callback_query(F.data == "back_to_chats")
async def cb_back_to_chats(callback: types.CallbackQuery):
    if callback.from_user.id not in OWNER_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    await show_chats_list(callback.bot, callback.message.chat.id, "messages_desc", 1)
    await callback.answer()

@dp.callback_query(F.data == "show_chats_from_profile")
async def cb_show_chats_from_profile(callback: types.CallbackQuery):
    if callback.from_user.id not in OWNER_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    await show_chats_list(callback.bot, callback.message.chat.id, "messages_desc", 1)
    await callback.answer()

@dp.callback_query(F.data.startswith("sort_chats|"))
async def cb_sort_chats(callback: types.CallbackQuery):
    if callback.from_user.id not in OWNER_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    _, sort_by, page = callback.data.split("|")
    page = int(page)
    
    await show_chats_list(callback.bot, callback.message.chat.id, sort_by, page)
    await callback.answer()

# --- /blacklist: –ø—Ä–æ—Å–º–æ—Ç—Ä —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º ---
@dp.message(Command("blacklist"))
async def cmd_blacklist(message: types.Message, command: CommandObject):
    if message.from_user.id not in OWNER_IDS:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('CREATE TABLE IF NOT EXISTS blacklist (user_id INTEGER PRIMARY KEY)')
    c.execute('SELECT user_id FROM blacklist')
    rows = c.fetchall()
    if not rows:
        await message.answer("–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        conn.close()
        return
    ids = [str(row[0]) for row in rows]
    # –ü–æ–ª—É—á–∞–µ–º username
    users = []
    for uid in ids:
        c.execute('SELECT username FROM users WHERE user_id = ?', (uid,))
        u = c.fetchone()
        users.append(f"{uid} (@{u[0]})" if u and u[0] else uid)
    conn.close()
    text = "<b>–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:</b>\n" + "\n".join(users)
    await message.answer(text, parse_mode=ParseMode.HTML)

# --- –ö–Ω–æ–ø–∫–∏ ‚Äúüëç‚Äù –∏ ‚Äúüëé‚Äù –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ ---
def save_feedback(user_id, message_id, feedback):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS feedback (
        user_id INTEGER,
        message_id INTEGER,
        feedback TEXT,
        date TEXT
    )''')
    today = datetime.date.today().isoformat()
    c.execute('''INSERT INTO feedback (user_id, message_id, feedback, date) VALUES (?, ?, ?, ?)''', (user_id, message_id, feedback, today))
    conn.commit()
    conn.close()

@dp.callback_query(F.data.startswith("fb|"))
async def cb_feedback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    _, fb, msg_id = callback.data.split("|", 2)
    save_feedback(user_id, int(msg_id), fb)
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ LOG_CHAT_ID
    if LOG_CHAT_ID:
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        # –ö—Ç–æ –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å
        c.execute('SELECT user_id, content FROM chat_history WHERE message_id = ? LIMIT 1', (msg_id,))
        row = c.fetchone()
        if row:
            asker_id = row[0]
            prompt = row[1]
        else:
            asker_id = None
            prompt = ''
        # username —Ç–æ–≥–æ, –∫—Ç–æ –∑–∞–¥–∞–ª
        asker_username = None
        if asker_id:
            c.execute('SELECT username FROM users WHERE user_id = ?', (asker_id,))
            u = c.fetchone()
            if u and u[0]:
                asker_username = u[0]
        # username —Ç–æ–≥–æ, –∫—Ç–æ –æ—Ü–µ–Ω–∏–ª
        c.execute('SELECT username FROM users WHERE user_id = ?', (user_id,))
        u2 = c.fetchone()
        rater_username = u2[0] if u2 and u2[0] else None
        conn.close()
        fb_emoji = 'üëç' if fb == 'like' else 'üëé'
        log_text = f"<b>–û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞</b> {fb_emoji}\n"
        if asker_id == user_id:
            log_text += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {asker_username or asker_id} (ID: <code>{asker_id}</code>)\n"
        else:
            log_text += f"üë§ <b>–ó–∞–ø—Ä–æ—Å–∏–ª:</b> {asker_username or asker_id} (ID: <code>{asker_id}</code>)\n"
            log_text += f"üßë <b>–û—Ü–µ–Ω–∏–ª:</b> {rater_username or user_id} (ID: <code>{user_id}</code>)\n"
        log_text += f"<b>–ü—Ä–æ–º–ø—Ç:</b> <code>{(prompt or '')[:100]}</code>"
        try:
            await callback.bot.send_message(LOG_CHAT_ID, log_text, parse_mode=ParseMode.HTML)
        except Exception:
            pass
    await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!", show_alert=False)

# –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ safe_edit_message/status_msg:
# builder = InlineKeyboardBuilder()
# builder.button(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"repeat|{message.text}")
# builder.button(text="üåê –ü–µ—Ä–µ–≤–µ—Å—Ç–∏", callback_data=f"translate|{formatted_response}")
# builder.button(text="üëç", callback_data=f"fb|like|{status_msg.message_id}")
# builder.button(text="üëé", callback_data=f"fb|dislike|{status_msg.message_id}")
# builder.button(text="üóÇ –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å –¥–∏–∞–ª–æ–≥", callback_data="showhistory")
# builder.adjust(5)  # –í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

# await status_msg.edit_text(
#     formatted_response,
#     parse_mode=ParseMode.HTML,
#     reply_markup=builder.as_markup()
# )

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ –∏ –∫–æ–º–∞–Ω–¥–∞ /groupmode ---
GROUP_MODES = {
    'always': '–û—Ç–≤–µ—á–∞—Ç—å –≤—Å–µ–≥–¥–∞',
    'command': '–¢–æ–ª—å–∫–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ',
    'reply': '–¢–æ–ª—å–∫–æ –≤ reply',
    'users': '–¢–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
    'disabled': '–ù–µ –æ—Ç–≤–µ—á–∞—Ç—å –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ'
}

def set_group_mode(group_id, mode, allowed_users=None):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS group_settings (
        group_id INTEGER PRIMARY KEY,
        mode TEXT,
        allowed_users TEXT
    )''')
    c.execute('INSERT OR REPLACE INTO group_settings (group_id, mode, allowed_users) VALUES (?, ?, ?)',
              (group_id, mode, ','.join(map(str, allowed_users)) if allowed_users else None))
    conn.commit()
    conn.close()

def get_group_mode(group_id):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS group_settings (
        group_id INTEGER PRIMARY KEY,
        mode TEXT,
        allowed_users TEXT
    )''')
    c.execute('SELECT mode, allowed_users FROM group_settings WHERE group_id = ?', (group_id,))
    row = c.fetchone()
    conn.close()
    if row:
        mode, allowed_users = row
        allowed_users = [int(uid) for uid in allowed_users.split(',')] if allowed_users else []
        return mode, allowed_users
    return 'always', []

@dp.message(Command("groupmode"))
async def cmd_groupmode(message: types.Message, command: CommandObject):
    if message.from_user.id not in OWNER_IDS:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return
    if message.chat.type not in ("group", "supergroup"):
        await message.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return
    group_id = message.chat.id
    mode, allowed_users = get_group_mode(group_id)
    builder = InlineKeyboardBuilder()
    for k, v in GROUP_MODES.items():
        builder.button(text=v, callback_data=f"setgroupmode|{k}")
    text = f"<b>–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ:</b>\n{GROUP_MODES.get(mode, mode)}"
    if mode == 'users' and allowed_users:
        text += f"\n–†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {', '.join(map(str, allowed_users))}"
    await message.answer(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)

@dp.callback_query(F.data.startswith("setgroupmode|"))
async def cb_setgroupmode(callback: types.CallbackQuery):
    if callback.from_user.id not in OWNER_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    group_id = callback.message.chat.id
    _, mode = callback.data.split("|", 1)
    set_group_mode(group_id, mode)
    await callback.answer("–†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª—ë–Ω")
    await callback.message.edit_text(f"–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –≤ –≥—Ä—É–ø–ø–µ –æ–±–Ω–æ–≤–ª—ë–Ω: {GROUP_MODES.get(mode, mode)}")

@dp.message(Command("addgroupuser"))
async def cmd_addgroupuser(message: types.Message, command: CommandObject):
    if message.from_user.id not in OWNER_IDS:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return
    if message.chat.type not in ("group", "supergroup"):
        await message.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return
    if not command.args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addgroupuser <user_id>")
        return
    group_id = message.chat.id
    user_id = int(command.args[0])
    mode, allowed_users = get_group_mode(group_id)
    if user_id not in allowed_users:
        allowed_users.append(user_id)
        set_group_mode(group_id, 'users', allowed_users)
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.")

@dp.message(Command("removegroupuser"))
async def cmd_removegroupuser(message: types.Message, command: CommandObject):
    if message.from_user.id not in OWNER_IDS:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return
    if message.chat.type not in ("group", "supergroup"):
        await message.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return
    if not command.args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removegroupuser <user_id>")
        return
    group_id = message.chat.id
    user_id = int(command.args[0])
    mode, allowed_users = get_group_mode(group_id)
    if user_id in allowed_users:
        allowed_users.remove(user_id)
        set_group_mode(group_id, 'users', allowed_users)
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.")

@dp.message(Command("groupusers"))
async def cmd_groupusers(message: types.Message, command: CommandObject):
    if message.from_user.id not in OWNER_IDS:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return
    if message.chat.type not in ("group", "supergroup"):
        await message.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return
    group_id = message.chat.id
    mode, allowed_users = get_group_mode(group_id)
    if not allowed_users:
        await message.answer("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    await message.answer("–†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã: " + ", ".join(map(str, allowed_users)))

def check_env_and_warn():
    missing = []
    if not TELEGRAM_TOKEN:
        missing.append('TELEGRAM_TOKEN')
    if not OPENROUTER_API_KEY:
        missing.append('OPENROUTER_API_KEY')
    if not os.getenv('OWNER_IDS'):
        missing.append('OWNER_IDS')
    if not LOG_CHAT_ID:
        missing.append('LOG_CHAT_ID')
    if missing:
        msg = f"[DeepSeekBot] –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}.\n–ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω."
        print(msg)
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –∏ owner_id, –ø—Ä–æ–±—É–µ–º —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if TELEGRAM_TOKEN and OWNER_ID:
            import asyncio
            from aiogram import Bot
            async def notify_owner():
                bot = Bot(token=TELEGRAM_TOKEN)
                try:
                    await bot.send_message(OWNER_ID, msg)
                except Exception:
                    pass
            asyncio.run(notify_owner())
        exit(1)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    check_env_and_warn()
    init_db()
    bot = Bot(token=TELEGRAM_TOKEN)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    asyncio.create_task(notify_file_changes(bot))
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main()) 