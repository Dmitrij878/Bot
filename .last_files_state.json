{
  "bot_aiogram.py": "97eb82ff0fadbf10081c6658279431ca",
  "bot_aiogram.py_content": "import os\nimport logging\nimport asyncio\nimport aiohttp\nimport sqlite3\nimport re\nimport math\nfrom dotenv import load_dotenv\nfrom pathlib import Path\nfrom aiogram import Bot, Dispatcher, types, F\nfrom aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup\nfrom aiogram.filters import Command, CommandObject\nfrom aiogram.utils.keyboard import InlineKeyboardBuilder\nfrom aiogram.exceptions import TelegramRetryAfter\nfrom aiogram.enums import ParseMode\nimport datetime\n# 1. –ò–º–ø–æ—Ä—Ç langdetec\nfrom langdetect import detect\nimport tempfile\nimport zipfile\nfrom aiogram.types import InputFile\nfrom aiogram.types.input_file import FSInputFile\nimport hashlib\nimport json\n\n# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ notify_file_changes (–∏ –≤—Å–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–µ—ë)\n# –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –î–û main()\n\nimport hashlib\nimport json\nimport re\nFILES_STATE_PATH = \".last_files_state.json\"\nSCAN_FILE = \"bot_aiogram.py\"\n\ndef get_file_hash(path):\n    try:\n        with open(path, \"rb\") as f:\n            content = f.read()\n        return hashlib.md5(content).hexdigest()\n    except Exception:\n        return None\n\ndef analyze_changes(old_content, new_content):\n    \"\"\"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ\"\"\"\n    changes = []\n    \n    # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ old_content –Ω–µ None\n    old_content = old_content or \"\"\n    \n    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥\n    old_commands = re.findall(r'@dp\\.message\\(Command\\(\"([^\"]+)\"\\)\\)', old_content)\n    new_commands = re.findall(r'@dp\\.message\\(Command\\(\"([^\"]+)\"\\)\\)', new_content)\n    \n    added_commands = set(new_commands) - set(old_commands)\n    if added_commands:\n        changes.append(f\"‚ûï –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã: {', '.join(added_commands)}\")\n    \n    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫\n    if \"command.args\" in old_content and \"message.text.split()\" in new_content:\n        changes.append(\"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥\")\n    \n    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π\n    if \"async def cmd_profile\" in new_content and \"async def cmd_profile\" not in old_content:\n        changes.append(\"üë§ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /profile —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π\")\n    \n    if \"async def cmd_limits\" in new_content and \"async def cmd_limits\" not in old_content:\n        changes.append(\"üìä –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /limits –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤\")\n    \n    if \"async def cmd_chats\" in new_content and \"async def cmd_chats\" not in old_content:\n        changes.append(\"üí¨ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\")\n    \n    if \"SPONSOR_CHANNEL_ID\" in new_content and \"SPONSOR_CHANNEL_ID\" not in old_content:\n        changes.append(\"üì¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã —Å–ø–æ–Ω—Å–æ—Ä–æ–≤\")\n    \n    if \"custom_limit\" in new_content and \"limit INTEGER\" not in old_content:\n        changes.append(\"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ SQLite —Å –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ª–æ–≤–æ–º 'limit'\")\n    \n    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫\n    if \"InlineKeyboardBuilder\" in new_content and \"InlineKeyboardBuilder\" not in old_content:\n        changes.append(\"üîò –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\")\n    \n    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n    if \"is_blacklisted\" in new_content and \"is_blacklisted\" not in old_content:\n        changes.append(\"üõ°Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞\")\n    \n    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n    if not changes:\n        changes.append(\"üìù –û–±—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ\")\n    \n    return changes\n\nasync def notify_file_changes(bot):\n    await asyncio.sleep(10)  # –ñ–¥—ë–º 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞\n    old_state = {}\n    old_content = None\n    \n    if os.path.exists(FILES_STATE_PATH):\n        with open(FILES_STATE_PATH, \"r\", encoding=\"utf-8\") as f:\n            old_state = json.load(f)\n    \n    # –ß–∏—Ç–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –µ—Å–ª–∏ –µ—Å—Ç—å\n    if old_state.get(SCAN_FILE + \"_content\"):\n        old_content = old_state.get(SCAN_FILE + \"_content\")\n    \n    new_hash = get_file_hash(SCAN_FILE)\n    old_hash = old_state.get(SCAN_FILE)\n    \n    if new_hash and old_hash and new_hash != old_hash:\n        # –ß–∏—Ç–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n        try:\n            with open(SCAN_FILE, \"r\", encoding=\"utf-8\") as f:\n                new_content = f.read()\n        except Exception:\n            new_content = \"\"\n        \n        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è\n        changes = analyze_changes(old_content, new_content)\n        \n        msg = f\"<b>üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ {SCAN_FILE}:</b>\\n\\n\"\n        for change in changes:\n            msg += f\"‚Ä¢ {change}\\n\"\n        \n        try:\n            await bot.send_message(LOG_CHAT_ID, msg, parse_mode=\"HTML\")\n        except Exception:\n            pass\n        \n        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è\n        old_state[SCAN_FILE + \"_content\"] = new_content\n        \n    elif new_hash and not old_hash:\n        msg = f\"<b>üìÅ –§–∞–π–ª {SCAN_FILE} –¥–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤–ø–µ—Ä–≤—ã–µ.</b>\"\n        try:\n            await bot.send_message(LOG_CHAT_ID, msg, parse_mode=\"HTML\")\n        except Exception:\n            pass\n    \n    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n    old_state[SCAN_FILE] = new_hash\n    with open(FILES_STATE_PATH, \"w\", encoding=\"utf-8\") as f:\n        json.dump(old_state, f, ensure_ascii=False, indent=2)\n\n# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è\nenv_path = Path(__file__).parent / '.env'\nload_dotenv(dotenv_path=env_path)\n\nTELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')\nOPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')\nOWNER_ID = int(os.getenv('OWNER_ID', '0'))\nOWNER_IDS = [int(x) for x in os.getenv('OWNER_IDS', '0').split(',')]\nLOG_CHAT_ID = os.getenv('LOG_CHAT_ID')\n\nAVAILABLE_MODELS = {\n    'deepseek': {\n        'id': 'deepseek/deepseek-chat-v3-0324:free',\n        'desc': (\n            'DeepSeek ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫—Ä—É–ø–Ω–∞—è –º–æ–¥–µ–ª—å, –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –∞–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö, —Å–ª–æ–∂–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. –•–æ—Ä–æ—à–æ –¥–µ—Ä–∂–∏—Ç –¥–ª–∏–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, —É–º–µ–µ—Ç –æ–±—ä—è—Å–Ω—è—Ç—å –∏ —Ä–∞—Å—Å—É–∂–¥–∞—Ç—å, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.\\n'\n            '–û—Ü–µ–Ω–∫–∏:\\n'\n            '‚Ä¢ –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: 8/10\\n'\n            '‚Ä¢ –û–±—â–µ–Ω–∏–µ/—á–∞—Ç: 8/10\\n'\n            '‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞: 10/10\\n'\n            '‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ: 9/10\\n'\n            '‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤/–∏—Å—Ç–æ—Ä–∏–∏: 7/10\\n'\n            '‚Ä¢ –†–æ–ª–µ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏: 7/10'\n        )\n    },\n    'openchat': {\n        'id': 'mistralai/mistral-7b-instruct:free',\n        'desc': (\n            'Mistral ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —á–∞—Ç–∞ –∏ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á. –û—Ç–ª–∏—á–∞–µ—Ç—Å—è –≤—ã—Å–æ–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º —Å—Ç–∏–ª–µ–º, —Ö–æ—Ä–æ—à–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è, —Å–æ–≤–µ—Ç–æ–≤, –∫–æ—Ä–æ—Ç–∫–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –±–∞–∑–æ–≤–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ.\\n'\n            '–û—Ü–µ–Ω–∫–∏:\\n'\n            '‚Ä¢ –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: 9/10\\n'\n            '‚Ä¢ –û–±—â–µ–Ω–∏–µ/—á–∞—Ç: 9/10\\n'\n            '‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞: 7/10\\n'\n            '‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ: 8/10\\n'\n            '‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤/–∏—Å—Ç–æ—Ä–∏–∏: 7/10\\n'\n            '‚Ä¢ –†–æ–ª–µ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏: 7/10'\n        )\n    },\n    'mistral': {\n        'id': 'mistralai/mistral-7b-instruct',\n        'desc': (\n            'Mistral ‚Äî –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å, –¥–∞—ë—Ç –∫—Ä–∞—Ç–∫–∏–µ, –ª–∞–∫–æ–Ω–∏—á–Ω—ã–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, —Ö–æ—Ä–æ—à–æ –¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤-–æ—Ç–≤–µ—Ç–æ–≤, —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –±—ã—Å—Ç—Ä—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤.\\n'\n            '–û—Ü–µ–Ω–∫–∏:\\n'\n            '‚Ä¢ –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: 8/10\\n'\n            '‚Ä¢ –û–±—â–µ–Ω–∏–µ/—á–∞—Ç: 8/10\\n'\n            '‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞: 7/10\\n'\n            '‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ: 8/10\\n'\n            '‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤/–∏—Å—Ç–æ—Ä–∏–∏: 6/10\\n'\n            '‚Ä¢ –†–æ–ª–µ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏: 6/10'\n        )\n    },\n    'llama': {\n        'id': 'meta-llama/llama-3.1-8b-instruct:free',\n        'desc': (\n            'Llama 3.1 ‚Äî –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏ –æ—Ç Meta, —Ö–æ—Ä–æ—à–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π, –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–π, —Ä–æ–ª–µ–≤—ã—Ö –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤. –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ª—É—á—à–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏.\\n'\n            '–û—Ü–µ–Ω–∫–∏:\\n'\n            '‚Ä¢ –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: 8/10\\n'\n            '‚Ä¢ –û–±—â–µ–Ω–∏–µ/—á–∞—Ç: 9/10\\n'\n            '‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞: 7/10\\n'\n            '‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ: 8/10\\n'\n            '‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤/–∏—Å—Ç–æ—Ä–∏–∏: 9/10\\n'\n            '‚Ä¢ –†–æ–ª–µ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏: 9/10'\n        )\n    },\n    'mythomax': {\n        'id': 'gryphe/mythomax-l2-13b',\n        'desc': (\n            'MythoMax ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Ä–æ–ª–µ–≤—ã—Ö, —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∏ –¥–ª–∏–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞—Ö, —Å—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥–µ, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—ã—á–Ω—ã—Ö –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤. –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∏–≥—Ä, —Ä–æ–ª–µ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤, —Ñ–∞–Ω—Ç–∞–∑–∏–π –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.\\n'\n            '–û—Ü–µ–Ω–∫–∏:\\n'\n            '‚Ä¢ –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: 6/10\\n'\n            '‚Ä¢ –û–±—â–µ–Ω–∏–µ/—á–∞—Ç: 7/10\\n'\n            '‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞: 5/10\\n'\n            '‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ: 6/10\\n'\n            '‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤/–∏—Å—Ç–æ—Ä–∏–∏: 10/10\\n'\n            '‚Ä¢ –†–æ–ª–µ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏: 10/10'\n        )\n    },\n}\nDEFAULT_MODEL = AVAILABLE_MODELS['deepseek']['id']\n\n# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è\nlogging.basicConfig(\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    level=logging.INFO,\n    handlers=[logging.StreamHandler()]\n)\nlogger = logging.getLogger(__name__)\n\n# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---\ndef init_db():\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('''CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, username TEXT, chat_id INTEGER)''')\n    c.execute('''CREATE TABLE IF NOT EXISTS chat_history (user_id INTEGER, message_id INTEGER, role TEXT, content TEXT)''')\n    c.execute('''CREATE TABLE IF NOT EXISTS user_models (user_id INTEGER PRIMARY KEY, model TEXT)''')\n    c.execute('''CREATE TABLE IF NOT EXISTS blacklist (user_id INTEGER PRIMARY KEY)''')\n    c.execute('''CREATE TABLE IF NOT EXISTS group_settings (\n        group_id INTEGER PRIMARY KEY,\n        mode TEXT,\n        allowed_users TEXT\n    )''')\n    conn.commit()\n    conn.close()\n\ndef migrate_old_models():\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    model_migrations = {\n        'meta-llama/llama-2-7b-chat': 'meta-llama/llama-3.1-8b-instruct:free',\n        'openchat/openchat-3.5': 'mistralai/mistral-7b-instruct:free',\n        'openchat/openchat-3.5-0106': 'mistralai/mistral-7b-instruct:free',\n    }\n    for old_model, new_model in model_migrations.items():\n        c.execute('UPDATE user_models SET model = ? WHERE model = ?', (new_model, old_model))\n    conn.commit()\n    conn.close()\n\ndef set_user_model(user_id, model):\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('INSERT OR REPLACE INTO user_models (user_id, model) VALUES (?, ?)', (user_id, model))\n    conn.commit()\n    conn.close()\n\ndef get_user_model(user_id):\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('SELECT model FROM user_models WHERE user_id = ?', (user_id,))\n    row = c.fetchone()\n    conn.close()\n    if row and row[0]:\n        if row[0] == 'meta-llama/llama-2-7b-chat':\n            set_user_model(user_id, 'meta-llama/llama-3.1-8b-instruct:free')\n            return 'meta-llama/llama-3.1-8b-instruct:free'\n        return row[0]\n    return None\n\ndef add_to_blacklist(user_id):\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('INSERT OR IGNORE INTO blacklist (user_id) VALUES (?)', (user_id,))\n    conn.commit()\n    conn.close()\n\ndef remove_from_blacklist(user_id):\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('DELETE FROM blacklist WHERE user_id = ?', (user_id,))\n    conn.commit()\n    conn.close()\n\ndef is_blacklisted(user_id):\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('SELECT 1 FROM blacklist WHERE user_id = ?', (user_id,))\n    result = c.fetchone()\n    conn.close()\n    return result is not None\n\n# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---\ndef convert_markdown_to_telegram(text):\n    text = re.sub(r'\\*\\*(.*?)\\*\\*', r'<b>\\1</b>', text)\n    text = re.sub(r'\\*(.*?)\\*', r'<i>\\1</i>', text)\n    text = re.sub(r'~~(.*?)~~', r'<s>\\1</s>', text)\n    text = re.sub(r'`(.*?)`', r'<code>\\1</code>', text)\n    text = re.sub(r'\\[(.*?)\\]\\((.*?)\\)', r'<a href=\"\\2\">\\1</a>', text)\n    text = re.sub(r'^#+\\s+', '', text, flags=re.MULTILINE)\n    text = re.sub(r'^[-*_]{3,}$', '', text, flags=re.MULTILINE)\n    text = re.sub(r'\\n{3,}', '\\n\\n', text)\n    text = text.strip()\n    return text\n\n# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ ---\nGLOBAL_BOT_ENABLED = True\n\ndef set_global_bot_enabled(value: bool):\n    global GLOBAL_BOT_ENABLED\n    GLOBAL_BOT_ENABLED = value\n\ndef is_global_bot_enabled():\n    return GLOBAL_BOT_ENABLED\n\n# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±–∞–∑—É ---\ndef log_event(event, details, user_id=None, username=None):\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('''CREATE TABLE IF NOT EXISTS logs (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        date TEXT,\n        user_id INTEGER,\n        username TEXT,\n        event TEXT,\n        details TEXT\n    )''')\n    now = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n    c.execute('INSERT INTO logs (date, user_id, username, event, details) VALUES (?, ?, ?, ?, ?)',\n              (now, user_id, username, event, details))\n    conn.commit()\n    conn.close()\n\n# log_suspicious —Ç–µ–ø–µ—Ä—å –ø–∏—à–µ—Ç –≤ –±–∞–∑—É –∏ –≤ LOG_CHAT_ID\nimport functools\ndef log_suspicious(text, user_id=None, username=None):\n    log_event('suspicious', text, user_id, username)\n    if LOG_CHAT_ID:\n        from aiogram import Bot\n        import asyncio\n        async def send():\n            bot = Bot(token=TELEGRAM_TOKEN)\n            try:\n                await bot.send_message(LOG_CHAT_ID, f\"‚ö†Ô∏è <b>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>\\n{text}\", parse_mode=ParseMode.HTML)\n            except Exception:\n                pass\n        asyncio.create_task(send())\n\n# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ flood control ---\nasync def safe_send_message(bot, chat_id, *args, **kwargs):\n    while True:\n        try:\n            return await bot.send_message(chat_id, *args, **kwargs)\n        except TelegramRetryAfter as e:\n            await asyncio.sleep(e.retry_after)\n        except Exception as e:\n            logger.error(f\"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}\")\n            break\n\nasync def safe_edit_message(message, *args, **kwargs):\n    while True:\n        try:\n            return await message.edit_text(*args, **kwargs)\n        except TelegramRetryAfter as e:\n            await asyncio.sleep(e.retry_after)\n        except Exception as e:\n            logger.error(f\"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}\")\n            break\n\n# --- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---\ndp = Dispatcher()\n\n@dp.message(Command(\"start\"))\nasync def cmd_start(message: types.Message, command: CommandObject):\n    user_id = message.from_user.id\n    username = message.from_user.username or \"Unknown\"\n    chat_id = message.chat.id\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('INSERT OR REPLACE INTO users (user_id, username, chat_id) VALUES (?, ?, ?)', (user_id, username, chat_id))\n    conn.commit()\n    conn.close()\n    model = get_user_model(user_id) or DEFAULT_MODEL\n    model_name = [k for k, v in AVAILABLE_MODELS.items() if v['id'] == model]\n    model_name = model_name[0] if model_name else model\n    await safe_send_message(message.bot, chat_id, f'–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –º–æ–¥–µ–ª—å—é <b>{model_name}</b>\\n–í –ª–∏—á–Ω–æ–º —á–∞—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤ –≥—Ä—É–ø–ø–µ ‚Äî –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –º–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ.\\n\\n–î–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help', parse_mode=ParseMode.HTML)\n\n@dp.message(Command(\"help\"))\nasync def cmd_help(message: types.Message, command: CommandObject):\n    text = (\n        \"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\\n\"\n        \"/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å\\n\"\n        \"/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\\n\"\n        \"/models ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞\\n\"\n        \"/setmodel &lt;–∏–º—è&gt; ‚Äî –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –≤—Ä—É—á–Ω—É—é (–∫–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ –ø–æ–ª–Ω–æ–µ –∏–º—è)\\n\"\n        \"/clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏ –∫—ç—à\\n\"\n        \"/history ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π\\n\"\n        \"/language ‚Äî –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\\n\"\n        \"/systemprompt &lt;—Ç–µ–∫—Å—Ç&gt; ‚Äî –∑–∞–¥–∞—Ç—å —Å–≤–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM\\n\"\n        \"/limits ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∏\\n\"\n        \"/profile ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\\n\"\n        \"\\n<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\\n\"\n        \"‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (—É—Å–∫–æ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç—ã –∏ —ç–∫–æ–Ω–æ–º–∏—Ç –ª–∏–º–∏—Ç)\\n\"\n        \"‚Ä¢ –õ–∏–º–∏—Ç—ã –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏ (—É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–æ–≤/—á–∞—Ç–æ–≤ —Å–ø–æ–Ω—Å–æ—Ä–∞)\\n\"\n        \"‚Ä¢ –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞: üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å, üåê –ü–µ—Ä–µ–≤–µ—Å—Ç–∏, üëç/üëé –û—Ü–µ–Ω–∏—Ç—å, üóÇ –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å –¥–∏–∞–ª–æ–≥\\n\"\n        \"‚Ä¢ –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\\n\"\n        \"‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ (—Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º)\\n\"\n        \"\\n<b>–í –≥—Ä—É–ø–ø–µ:</b>\\n\"\n        \"‚Ä¢ –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ reply, –ø–æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º)\\n\"\n        \"\\n\"\n    )\n    await message.answer(text, parse_mode=ParseMode.HTML)\n\n@dp.message(Command(\"ownerhelp\"))\nasync def cmd_ownerhelp(message: types.Message, command: CommandObject):\n    if message.from_user.id not in OWNER_IDS:\n        await safe_send_message(message.bot, message.chat.id, \"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.\")\n        return\n    text = (\n        \"<b>–ö–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞:</b>\\n\"\n        \"/broadcast &lt;—Ç–µ–∫—Å—Ç&gt; ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\\n\"\n        \"/stats ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\\n\"\n        \"/go ‚Äî –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—Ä–∞–∑—Ä–µ—à–∞–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –≤—Å–µ–º)\\n\"\n        \"/stop ‚Äî –≥–ª–æ–±–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ (–±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∏–∫–æ–º—É, –∫—Ä–æ–º–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞)\\n\"\n        \"/migrate ‚Äî –º–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ –Ω–æ–≤—ã–µ\\n\"\n        \"/block &lt;id&gt; ‚Äî –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\\n\"\n        \"/unblock &lt;id&gt; ‚Äî —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\\n\"\n        \"/blacklist ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫\\n\"\n        \"/groupmode ‚Äî —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –≤ –≥—Ä—É–ø–ø–µ (—Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ)\\n\"\n        \"/addgroupuser &lt;id&gt; ‚Äî —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ (—Ä–µ–∂–∏–º users)\\n\"\n        \"/removegroupuser &lt;id&gt; ‚Äî —É–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –≤ –≥—Ä—É–ø–ø–µ (—Ä–µ–∂–∏–º users)\\n\"\n        \"/groupusers ‚Äî —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ (—Ä–µ–∂–∏–º users)\\n\"\n        \"/setlimit &lt;user_id&gt; &lt;—á–∏—Å–ª–æ&gt; ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\\n\"\n        \"/chats ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\\n\"\n        \"/logs ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏\\n\"\n    )\n    await safe_send_message(message.bot, message.chat.id, text, parse_mode=ParseMode.HTML)\n\n@dp.message(Command(\"setlimit\"))\nasync def cmd_setlimit(message: types.Message, command: CommandObject):\n    if message.from_user.id not in OWNER_IDS:\n        await safe_send_message(message.bot, message.chat.id, \"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.\")\n        return\n    \n    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è\n    parts = message.text.split()\n    if len(parts) < 3:\n        await safe_send_message(message.bot, message.chat.id, \"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setlimit &lt;user_id&gt; &lt;—á–∏—Å–ª–æ&gt;\", parse_mode=ParseMode.HTML)\n        return\n    \n    try:\n        target_user_id = int(parts[1])\n        new_limit = int(parts[2])\n        \n        if new_limit < 0:\n            await safe_send_message(message.bot, message.chat.id, \"–õ–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.\")\n            return\n        \n        conn = sqlite3.connect('bot.db')\n        c = conn.cursor()\n        c.execute('CREATE TABLE IF NOT EXISTS user_custom_limits (user_id INTEGER PRIMARY KEY, custom_limit INTEGER)')\n        c.execute('INSERT OR REPLACE INTO user_custom_limits (user_id, custom_limit) VALUES (?, ?)', (target_user_id, new_limit))\n        conn.commit()\n        conn.close()\n        \n        await safe_send_message(message.bot, message.chat.id, f\"–õ–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_limit} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å.\")\n        \n    except ValueError:\n        await safe_send_message(message.bot, message.chat.id, \"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setlimit &lt;user_id&gt; &lt;—á–∏—Å–ª–æ&gt;\", parse_mode=ParseMode.HTML)\n    except Exception as e:\n        await safe_send_message(message.bot, message.chat.id, f\"–û—à–∏–±–∫–∞: {str(e)}\")\n\n@dp.message(Command(\"chats\"))\nasync def cmd_chats(message: types.Message, command: CommandObject):\n    if message.from_user.id not in OWNER_IDS:\n        await safe_send_message(message.bot, message.chat.id, \"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.\")\n        return\n    \n    await show_chats_list(message.bot, message.chat.id, sort_by=\"messages_desc\")\n\nasync def show_chats_list(bot, chat_id, sort_by=\"messages_desc\", page=1):\n    \"\"\"–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π\"\"\"\n    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º SQL –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏\n    sort_queries = {\n        \"messages_desc\": '''\n            SELECT DISTINCT u.user_id, u.username, COUNT(ch.message_id) as msg_count\n            FROM users u\n            LEFT JOIN chat_history ch ON u.user_id = ch.user_id\n            GROUP BY u.user_id\n            HAVING msg_count > 0\n            ORDER BY msg_count DESC\n        ''',\n        \"messages_asc\": '''\n            SELECT DISTINCT u.user_id, u.username, COUNT(ch.message_id) as msg_count\n            FROM users u\n            LEFT JOIN chat_history ch ON u.user_id = ch.user_id\n            GROUP BY u.user_id\n            HAVING msg_count > 0\n            ORDER BY msg_count ASC\n        ''',\n        \"username_asc\": '''\n            SELECT DISTINCT u.user_id, u.username, COUNT(ch.message_id) as msg_count\n            FROM users u\n            LEFT JOIN chat_history ch ON u.user_id = ch.user_id\n            GROUP BY u.user_id\n            HAVING msg_count > 0\n            ORDER BY COALESCE(u.username, '') ASC\n        ''',\n        \"username_desc\": '''\n            SELECT DISTINCT u.user_id, u.username, COUNT(ch.message_id) as msg_count\n            FROM users u\n            LEFT JOIN chat_history ch ON u.user_id = ch.user_id\n            GROUP BY u.user_id\n            HAVING msg_count > 0\n            ORDER BY COALESCE(u.username, '') DESC\n        ''',\n        \"recent\": '''\n            SELECT DISTINCT u.user_id, u.username, COUNT(ch.message_id) as msg_count,\n                   MAX(ch.message_id) as last_message_id\n            FROM users u\n            LEFT JOIN chat_history ch ON u.user_id = ch.user_id\n            GROUP BY u.user_id\n            HAVING msg_count > 0\n            ORDER BY last_message_id DESC\n        ''',\n        \"oldest\": '''\n            SELECT DISTINCT u.user_id, u.username, COUNT(ch.message_id) as msg_count,\n                   MIN(ch.message_id) as first_message_id\n            FROM users u\n            LEFT JOIN chat_history ch ON u.user_id = ch.user_id\n            GROUP BY u.user_id\n            HAVING msg_count > 0\n            ORDER BY first_message_id ASC\n        '''\n    }\n    \n    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —á–∞—Ç–∞–º–∏\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute(sort_queries[sort_by] + f\" LIMIT 20 OFFSET {(page - 1) * 20}\")\n    users = c.fetchall()\n    \n    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —á–∞—Ç–∞–º–∏\n    c.execute('''\n        SELECT COUNT(DISTINCT u.user_id)\n        FROM users u\n        LEFT JOIN chat_history ch ON u.user_id = ch.user_id\n        GROUP BY u.user_id\n        HAVING COUNT(ch.message_id) > 0\n    ''')\n    total_users = len(c.fetchall())\n    conn.close()\n    \n    if not users:\n        await safe_send_message(bot, chat_id, \"–ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.\")\n        return\n    \n    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏\n    sort_names = {\n        \"messages_desc\": \"üìä –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π (—É–±—ã–≤–∞–Ω–∏–µ)\",\n        \"messages_asc\": \"üìä –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ)\",\n        \"username_asc\": \"üë§ –ü–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ê-–Ø)\",\n        \"username_desc\": \"üë§ –ü–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ø-–ê)\",\n        \"recent\": \"üïí –ü–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\",\n        \"oldest\": \"üïí –ü–æ –ø–µ—Ä–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\"\n    }\n    \n    text = f\"üì± <b>–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\\n\"\n    text += f\"üîÄ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {sort_names[sort_by]}\\n\"\n    text += f\"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {max(1, (total_users + 19) // 20)}\\n\\n\"\n    \n    builder = InlineKeyboardBuilder()\n    \n    for i, user_data in enumerate(users, 1):\n        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏\n        if len(user_data) == 3:\n            user_id, username, msg_count = user_data\n        elif len(user_data) == 4:\n            user_id, username, msg_count, _ = user_data  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ\n        else:\n            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n            \n        display_name = f\"@{username}\" if username else f\"ID: {user_id}\"\n        text += f\"{i}. {display_name} ({msg_count} —Å–æ–æ–±—â–µ–Ω–∏–π)\\n\"\n        builder.button(text=f\"{i}. {display_name[:15]}\", callback_data=f\"view_chat|{user_id}|1\")\n    \n    # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏\n    builder.button(text=\"üìä –ü–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º ‚Üì\", callback_data=f\"sort_chats|messages_desc|{page}\")\n    builder.button(text=\"üìä –ü–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º ‚Üë\", callback_data=f\"sort_chats|messages_asc|{page}\")\n    builder.button(text=\"üë§ –ü–æ –∏–º–µ–Ω–∏ –ê-–Ø\", callback_data=f\"sort_chats|username_asc|{page}\")\n    builder.button(text=\"üë§ –ü–æ –∏–º–µ–Ω–∏ –Ø-–ê\", callback_data=f\"sort_chats|username_desc|{page}\")\n    builder.button(text=\"üïí –ü–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\", callback_data=f\"sort_chats|recent|{page}\")\n    builder.button(text=\"üïí –ü–æ —Å—Ç–∞—Ä—à–∏–Ω—Å—Ç–≤—É\", callback_data=f\"sort_chats|oldest|{page}\")\n    \n    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n    if page > 1:\n        builder.button(text=\"‚¨ÖÔ∏è –ù–∞–∑–∞–¥\", callback_data=f\"sort_chats|{sort_by}|{page-1}\")\n    if page < (total_users + 19) // 20:\n        builder.button(text=\"–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è\", callback_data=f\"sort_chats|{sort_by}|{page+1}\")\n    \n    builder.adjust(2, 2, 2, 2, 2, 2, 2)  # 7 —Å—Ç—Ä–æ–∫ –ø–æ 2 –∫–Ω–æ–ø–∫–∏\n    \n    await safe_send_message(bot, chat_id, text, \n                          reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)\n\n@dp.message(Command(\"clear\"))\nasync def cmd_clear(message: types.Message, command: CommandObject):\n    user_id = message.from_user.id\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('DELETE FROM chat_history WHERE user_id = ?', (user_id,))\n    c.execute('DELETE FROM cache WHERE user_id = ?', (user_id,))\n    conn.commit()\n    conn.close()\n    await safe_send_message(message.bot, message.chat.id, \"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏ –∫—ç—à –æ—á–∏—â–µ–Ω—ã!\")\n\n@dp.message(Command(\"limits\"))\nasync def cmd_limits(message: types.Message, command: CommandObject):\n    user_id = message.from_user.id\n    chat_id = message.chat.id\n    \n    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏\n    channel_subscribed = False\n    chat_subscribed = False\n    \n    try:\n        member = await message.bot.get_chat_member(SPONSOR_CHANNEL_ID, user_id)\n        if member.status in (\"member\", \"administrator\", \"creator\"):\n            channel_subscribed = True\n    except Exception:\n        pass\n    \n    try:\n        member = await message.bot.get_chat_member(SPONSOR_CHAT_ID, user_id)\n        if member.status in (\"member\", \"administrator\", \"creator\"):\n            chat_subscribed = True\n    except Exception:\n        pass\n    \n    # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã\n    daily_limit = await get_user_daily_limit(message.bot, user_id)\n    current_usage = get_user_limit(user_id)\n    \n    status_text = f\"üìä <b>–í–∞—à–∏ –ª–∏–º–∏—Ç—ã:</b>\\n\\n\"\n    status_text += f\"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {current_usage}/{daily_limit}\\n\\n\"\n    \n    if channel_subscribed and chat_subscribed:\n        status_text += \"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏: –û–±–∞ –∫–∞–Ω–∞–ª–∞\\n\"\n        status_text += f\"–ë–æ–Ω—É—Å: +{CHANNEL_BONUS + CHAT_BONUS} –∑–∞–ø—Ä–æ—Å–æ–≤\"\n    elif channel_subscribed:\n        status_text += \"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∏: –¢–æ–ª—å–∫–æ Axis Messenger\\n\"\n        status_text += f\"–ë–æ–Ω—É—Å: +{CHANNEL_BONUS} –∑–∞–ø—Ä–æ—Å–æ–≤\"\n    elif chat_subscribed:\n        status_text += \"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∏: –¢–æ–ª—å–∫–æ Axis Messenger Dev\\n\"\n        status_text += f\"–ë–æ–Ω—É—Å: +{CHAT_BONUS} –∑–∞–ø—Ä–æ—Å–æ–≤\"\n    else:\n        status_text += \"‚ùå –ü–æ–¥–ø–∏—Å–∫–∏: –ù–µ—Ç\\n\"\n        status_text += \"–ë–æ–Ω—É—Å: +0 –∑–∞–ø—Ä–æ—Å–æ–≤\"\n    \n    builder = InlineKeyboardBuilder()\n    if not channel_subscribed:\n        builder.button(text=\"üì¢ Axis Messenger\", url=\"https://t.me/Axis_Messenger\")\n    if not chat_subscribed:\n        builder.button(text=\"üíª Axis Messenger Dev\", url=\"https://t.me/AxisMessengerDev\")\n    if not (channel_subscribed and chat_subscribed):\n        builder.button(text=\"‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏\", callback_data=\"check_subscriptions\")\n    \n    if builder.buttons:\n        builder.adjust(2, 1)\n        await safe_send_message(message.bot, chat_id, status_text, \n                              reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)\n    else:\n        await safe_send_message(message.bot, chat_id, status_text, parse_mode=ParseMode.HTML)\n\n@dp.message(Command(\"profile\"))\nasync def cmd_profile(message: types.Message, command: CommandObject):\n    user_id = message.from_user.id\n    chat_id = message.chat.id\n    username = message.from_user.username or \"–ù–µ —É–∫–∞–∑–∞–Ω\"\n    first_name = message.from_user.first_name or \"–ù–µ —É–∫–∞–∑–∞–Ω–æ\"\n    last_name = message.from_user.last_name or \"\"\n    \n    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n    if user_id in OWNER_IDS:\n        status = \"üëë –í–ª–∞–¥–µ–ª–µ—Ü\"\n        status_emoji = \"üëë\"\n    elif message.from_user.id == (await message.bot.me()).id:\n        status = \"ü§ñ –ë–æ—Ç\"\n        status_emoji = \"ü§ñ\"\n    else:\n        status = \"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\"\n        status_emoji = \"üë§\"\n    \n    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω\n    is_banned = is_blacklisted(user_id)\n    ban_status = \"üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\" if is_banned else \"üü¢ –ê–∫—Ç–∏–≤–µ–Ω\"\n    \n    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö\n    daily_limit = await get_user_daily_limit(message.bot, user_id)\n    current_usage = get_user_limit(user_id)\n    \n    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏\n    channel_subscribed = False\n    chat_subscribed = False\n    \n    try:\n        member = await message.bot.get_chat_member(SPONSOR_CHANNEL_ID, user_id)\n        if member.status in (\"member\", \"administrator\", \"creator\"):\n            channel_subscribed = True\n    except Exception:\n        pass\n    \n    try:\n        member = await message.bot.get_chat_member(SPONSOR_CHAT_ID, user_id)\n        if member.status in (\"member\", \"administrator\", \"creator\"):\n            chat_subscribed = True\n    except Exception:\n        pass\n    \n    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n    user_model = get_user_model(user_id) or DEFAULT_MODEL\n    model_name = next((k for k, v in AVAILABLE_MODELS.items() if v['id'] == user_model), user_model)\n    \n    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n    user_language = get_user_language(user_id)\n    language_name = LANGUAGES.get(user_language, user_language)\n    \n    # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n    system_prompt = get_user_systemprompt(user_id)\n    has_custom_prompt = \"‚úÖ –î–∞\" if system_prompt else \"‚ùå –ù–µ—Ç\"\n    \n    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('SELECT COUNT(*) FROM chat_history WHERE user_id = ? AND role = \"user\"', (user_id,))\n    messages_count = c.fetchone()[0] or 0\n    c.execute('SELECT COUNT(*) FROM chat_history WHERE user_id = ? AND role = \"assistant\"', (user_id,))\n    responses_count = c.fetchone()[0] or 0\n    conn.close()\n    \n    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å\n    profile_text = f\"<b>{status_emoji} –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\\n\\n\"\n    profile_text += f\"<b>ID:</b> <code>{user_id}</code>\\n\"\n    profile_text += f\"<b>–ò–º—è:</b> {first_name} {last_name}\\n\"\n    profile_text += f\"<b>Username:</b> @{username}\\n\"\n    profile_text += f\"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\\n\"\n    profile_text += f\"<b>–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞:</b> {ban_status}\\n\\n\"\n    \n    profile_text += f\"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\\n\"\n    profile_text += f\"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {messages_count}\\n\"\n    profile_text += f\"‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {responses_count}\\n\"\n    profile_text += f\"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {current_usage}/{daily_limit}\\n\\n\"\n    \n    profile_text += f\"<b>üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\\n\"\n    profile_text += f\"‚Ä¢ –ú–æ–¥–µ–ª—å: {model_name}\\n\"\n    profile_text += f\"‚Ä¢ –Ø–∑—ã–∫: {language_name}\\n\"\n    profile_text += f\"‚Ä¢ –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {has_custom_prompt}\\n\\n\"\n    \n    profile_text += f\"<b>üì¢ –ü–æ–¥–ø–∏—Å–∫–∏:</b>\\n\"\n    profile_text += f\"‚Ä¢ Axis Messenger: {'‚úÖ' if channel_subscribed else '‚ùå'}\\n\"\n    profile_text += f\"‚Ä¢ Axis Messenger Dev: {'‚úÖ' if chat_subscribed else '‚ùå'}\\n\"\n    \n    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤\n    if user_id in OWNER_IDS:\n        profile_text += f\"\\n<b>üëë –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞:</b>\\n\"\n        profile_text += f\"‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\\n\"\n        profile_text += f\"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º\\n\"\n        profile_text += f\"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\\n\"\n        profile_text += f\"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á—ë—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º\"\n    \n    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π\n    builder = InlineKeyboardBuilder()\n    \n    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n    if user_id not in OWNER_IDS:\n        builder.button(text=\"üìä –õ–∏–º–∏—Ç—ã\", callback_data=\"show_limits_profile\")\n        builder.button(text=\"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏\", callback_data=\"show_settings_profile\")\n        builder.button(text=\"üì¢ –ü–æ–¥–ø–∏—Å–∫–∏\", callback_data=\"check_subscriptions\")\n    \n    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ (–µ—Å–ª–∏ —Å–º–æ—Ç—Ä—è—Ç —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å)\n    if user_id in OWNER_IDS:\n        builder.button(text=\"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\", callback_data=\"show_stats_profile\")\n        builder.button(text=\"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\", callback_data=\"show_admin_panel\")\n    \n    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)\n    if is_banned and user_id not in OWNER_IDS:\n        builder.button(text=\"üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º\", url=f\"https://t.me/{OWNER_IDS[0] if OWNER_IDS else 'admin'}\")\n    \n    if builder.buttons:\n        builder.adjust(2, 1)\n        await safe_send_message(message.bot, chat_id, profile_text, \n                              reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)\n    else:\n        await safe_send_message(message.bot, chat_id, profile_text, parse_mode=ParseMode.HTML)\n\n@dp.message(Command(\"models\"))\nasync def cmd_models(message: types.Message, command: CommandObject):\n    builder = InlineKeyboardBuilder()\n    for k, v in AVAILABLE_MODELS.items():\n        builder.button(text=k, callback_data=f\"setmodel|{v['id']}\")\n    text = \"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:</b>\\n\" + \"\\n\\n\".join([\n        f\"<b>{k}</b>: <i>{v['id']}</i>\\n{v['desc']}\" for k, v in AVAILABLE_MODELS.items()\n    ])\n    await message.answer(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)\n\n@dp.callback_query(F.data.startswith(\"setmodel|\"))\nasync def cb_setmodel(callback: types.CallbackQuery):\n    model = callback.data.split(\"|\", 1)[1]\n    set_user_model(callback.from_user.id, model)\n    model_name = next((k for k, v in AVAILABLE_MODELS.items() if v['id'] == model), model)\n    await callback.message.edit_text(f\"–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: <b>{model_name}</b>\", parse_mode=ParseMode.HTML)\n    await callback.answer()\n\n@dp.message(Command(\"setmodel\"))\nasync def cmd_setmodel(message: types.Message, command: CommandObject):\n    if not command.args:\n        await safe_send_message(message.bot, message.chat.id, \"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setmodel &lt;–∫–æ—Ä–æ—Ç–∫–æ–µ_–∏–º—è_–∏–ª–∏_id_–º–æ–¥–µ–ª–∏&gt;\", parse_mode=ParseMode.HTML)\n        return\n    model_key = command.args[0].lower()\n    model = AVAILABLE_MODELS.get(model_key, {'id': model_key})['id']\n    set_user_model(message.from_user.id, model)\n    model_name = next((k for k, v in AVAILABLE_MODELS.items() if v['id'] == model), model)\n    await safe_send_message(message.bot, message.chat.id, f\"–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: <b>{model_name}</b>\", parse_mode=ParseMode.HTML)\n\n@dp.message(Command(\"go\"))\nasync def cmd_go(message: types.Message, command: CommandObject):\n    if message.from_user.id not in OWNER_IDS:\n        await safe_send_message(message.bot, message.chat.id, \"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.\")\n        return\n    set_global_bot_enabled(True)\n    await safe_send_message(message.bot, message.chat.id, \"–ë–æ—Ç —Ç–µ–ø–µ—Ä—å –æ—Ç–≤–µ—á–∞–µ—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\")\n\n@dp.message(Command(\"stop\"))\nasync def cmd_stop(message: types.Message, command: CommandObject):\n    if message.from_user.id not in OWNER_IDS:\n        await safe_send_message(message.bot, message.chat.id, \"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.\")\n        return\n    set_global_bot_enabled(False)\n    await safe_send_message(message.bot, message.chat.id, \"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É.\")\n\n@dp.message(Command(\"broadcast\"))\nasync def cmd_broadcast(message: types.Message, command: CommandObject):\n    if message.from_user.id not in OWNER_IDS:\n        await safe_send_message(message.bot, message.chat.id, \"–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.\")\n        return\n    if not command.args:\n        await safe_send_message(message.bot, message.chat.id, \"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast &lt;—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è&gt;\", parse_mode=ParseMode.HTML)\n        return\n    text = message.text.partition(' ')[2]\n    sent_count = 0\n    failed_count = 0\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('SELECT DISTINCT chat_id FROM users')\n    users = c.fetchall()\n    conn.close()\n    status_msg = await safe_send_message(message.bot, message.chat.id, \"üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...\")\n    for user in users:\n        try:\n            await safe_send_message(message.bot, user[0], text, parse_mode=ParseMode.HTML)\n            sent_count += 1\n        except Exception as e:\n            failed_count += 1\n            logger.error(f\"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}\")\n    await safe_edit_message(status_msg, f\"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\\nüì§ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\\n‚ùå –û—à–∏–±–æ–∫: {failed_count}\")\n\n@dp.message(Command(\"stats\"))\nasync def cmd_stats(message: types.Message, command: CommandObject):\n    if message.from_user.id not in OWNER_IDS:\n        await message.answer(\"–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.\")\n        return\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    # –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n    c.execute('SELECT COUNT(DISTINCT user_id) FROM users')\n    total_users = c.fetchone()[0]\n    # –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤\n    c.execute('SELECT COUNT(*) FROM chat_history WHERE role = \"user\"')\n    total_requests = c.fetchone()[0]\n    # –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤\n    c.execute('SELECT COUNT(*) FROM chat_history WHERE role = \"assistant\"')\n    total_responses = c.fetchone()[0]\n    # –¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n    c.execute('''SELECT u.username, ch.user_id, COUNT(*) as msg_count FROM chat_history ch JOIN users u ON ch.user_id = u.user_id WHERE ch.role = \"user\" GROUP BY ch.user_id ORDER BY msg_count DESC LIMIT 5''')\n    top_users = c.fetchall()\n    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º (7 –¥–Ω–µ–π)\n    c.execute('''SELECT date(substr(rowid,1,10), 'unixepoch'), COUNT(*) FROM chat_history WHERE role = \"user\" GROUP BY date(substr(rowid,1,10), 'unixepoch') ORDER BY date(substr(rowid,1,10), 'unixepoch') DESC LIMIT 7''')\n    days = c.fetchall()\n    # –ü–æ –≥—Ä—É–ø–ø–∞–º (—Ç–æ–ø-5)\n    c.execute('''SELECT chat_id, COUNT(*) as cnt FROM users WHERE chat_id < 0 GROUP BY chat_id ORDER BY cnt DESC LIMIT 5''')\n    top_groups = c.fetchall()\n    # –õ–∞–π–∫–∏/–¥–∏–∑–ª–∞–π–∫–∏\n    c.execute('''SELECT feedback, COUNT(*) FROM feedback GROUP BY feedback''')\n    fb_stats = dict(c.fetchall())\n    # –¢–æ–ø-–æ—Ç–≤–µ—Ç—ã –ø–æ –ª–∞–π–∫–∞–º\n    c.execute('''SELECT message_id, COUNT(*) as cnt FROM feedback WHERE feedback = 'like' GROUP BY message_id ORDER BY cnt DESC LIMIT 3''')\n    top_liked = c.fetchall()\n    conn.close()\n    stats_text = (\n        \"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\\n\\n\"\n        f\"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\\n\"\n        f\"üí¨ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\\n\"\n        f\"‚úÖ –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {total_responses}\\n\\n\"\n        \"üèÜ <b>–¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\\n\"\n    )\n    for i, (username, uid, count) in enumerate(top_users, 1):\n        stats_text += f\"{i}. @{username or uid}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π\\n\"\n    stats_text += \"\\nüìÖ <b>–ó–∞–ø—Ä–æ—Å—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:</b>\\n\"\n    for day, cnt in days:\n        stats_text += f\"{day}: {cnt}\\n\"\n    stats_text += \"\\nüë• <b>–¢–æ–ø-5 –≥—Ä—É–ø–ø:</b>\\n\"\n    for i, (gid, cnt) in enumerate(top_groups, 1):\n        stats_text += f\"{i}. <code>{gid}</code>: {cnt} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\\n\"\n    stats_text += \"\\nüëç <b>–õ–∞–π–∫–∏:</b> {0}   üëé <b>–î–∏–∑–ª–∞–π–∫–∏:</b> {1}\\n\".format(fb_stats.get('like', 0), fb_stats.get('dislike', 0))\n    stats_text += \"\\nüî• <b>–¢–æ–ø-3 –æ—Ç–≤–µ—Ç–∞ –ø–æ –ª–∞–π–∫–∞–º:</b>\\n\"\n    for mid, cnt in top_liked:\n        stats_text += f\"–û—Ç–≤–µ—Ç message_id={mid}: {cnt} üëç\\n\"\n    await message.answer(stats_text, parse_mode=ParseMode.HTML)\n\n@dp.message(Command(\"block\"))\nasync def cmd_block(message: types.Message, command: CommandObject):\n    if message.from_user.id not in OWNER_IDS:\n        await safe_send_message(message.bot, message.chat.id, \"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.\")\n        return\n    if message.reply_to_message:\n        target_user = message.reply_to_message.from_user\n        add_to_blacklist(target_user.id)\n        await safe_send_message(message.bot, message.chat.id, f\"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.mention_html()} (ID: <code>{target_user.id}</code>) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.\", parse_mode=ParseMode.HTML)\n        return\n    if command.args:\n        try:\n            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è\n            parts = message.text.split()\n            if len(parts) > 1:\n                target_id = int(parts[1])\n            else:\n                target_id = int(command.args[0])\n            \n            add_to_blacklist(target_id)\n            await safe_send_message(message.bot, message.chat.id, f\"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{target_id}</code> –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.\", parse_mode=ParseMode.HTML)\n        except Exception as e:\n            await safe_send_message(message.bot, message.chat.id, \"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /block &lt;id&gt; –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\", parse_mode=ParseMode.HTML)\n        return\n    await safe_send_message(message.bot, message.chat.id, \"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /block &lt;id&gt; –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\", parse_mode=ParseMode.HTML)\n\n@dp.message(Command(\"unblock\"))\nasync def cmd_unblock(message: types.Message, command: CommandObject):\n    if message.from_user.id not in OWNER_IDS:\n        await safe_send_message(message.bot, message.chat.id, \"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.\")\n        return\n    if message.reply_to_message:\n        target_user = message.reply_to_message.from_user\n        remove_from_blacklist(target_user.id)\n        await safe_send_message(message.bot, message.chat.id, f\"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.mention_html()} (ID: <code>{target_user.id}</code>) —É–¥–∞–ª—ë–Ω –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.\", parse_mode=ParseMode.HTML)\n        return\n    if command.args:\n        try:\n            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è\n            parts = message.text.split()\n            if len(parts) > 1:\n                target_id = int(parts[1])\n            else:\n                target_id = int(command.args[0])\n            \n            remove_from_blacklist(target_id)\n            await safe_send_message(message.bot, message.chat.id, f\"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{target_id}</code> —É–¥–∞–ª—ë–Ω –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.\", parse_mode=ParseMode.HTML)\n        except Exception:\n            await safe_send_message(message.bot, message.chat.id, \"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unblock &lt;id&gt; –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\", parse_mode=ParseMode.HTML)\n        return\n    await safe_send_message(message.bot, message.chat.id, \"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unblock &lt;id&gt; –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\", parse_mode=ParseMode.HTML)\n\n@dp.message(Command(\"migrate\"))\nasync def cmd_migrate(message: types.Message, command: CommandObject):\n    if message.from_user.id not in OWNER_IDS:\n        await safe_send_message(message.bot, message.chat.id, \"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.\")\n        return\n    await safe_send_message(message.bot, message.chat.id, \"üîÑ –ó–∞–ø—É—Å–∫–∞—é –º–∏–≥—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π...\")\n    migrate_old_models()\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('SELECT DISTINCT model FROM user_models')\n    user_models = [row[0] for row in c.fetchall()]\n    invalid_models = []\n    for model in user_models:\n        if model not in [v['id'] for v in AVAILABLE_MODELS.values()]:\n            invalid_models.append(model)\n    conn.close()\n    if invalid_models:\n        await safe_send_message(message.bot, message.chat.id, f\"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏:\\n{', '.join(invalid_models)}\\n\\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setmodel –¥–ª—è —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–µ–π —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\")\n    else:\n        await safe_send_message(message.bot, message.chat.id, \"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –í—Å–µ –º–æ–¥–µ–ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã.\")\n\n@dp.message(Command(\"export_chats\"))\nasync def cmd_export_chats(message: types.Message, command: CommandObject):\n    if message.from_user.id not in OWNER_IDS:\n        await message.answer(\"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.\")\n        return\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('SELECT DISTINCT user_id FROM chat_history')\n    user_ids = [row[0] for row in c.fetchall()]\n    temp_dir = tempfile.mkdtemp()\n    file_paths = []\n    for uid in user_ids:\n        c.execute('SELECT username FROM users WHERE user_id = ?', (uid,))\n        u = c.fetchone()\n        username = u[0] if u and u[0] else str(uid)\n        c.execute('SELECT message_id, role, content FROM chat_history WHERE user_id = ? ORDER BY message_id', (uid,))\n        rows = c.fetchall()\n        if not rows:\n            continue\n        safe_username = username.replace(' ', '_').replace('@', '')\n        file_name = f\"{safe_username}_{uid}.txt\"\n        file_path = os.path.join(temp_dir, file_name)\n        with open(file_path, 'w', encoding='utf-8') as f:\n            f.write(f\"user_id: {uid}\\nusername: {username}\\n\\n\")\n            for mid, role, content in rows:\n                f.write(f\"{role}: {content}\\n\")\n        file_paths.append(file_path)\n    conn.close()\n    if not file_paths:\n        await message.answer(\"–ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.\")\n        return\n    # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º\n    zip_path = os.path.join(temp_dir, \"chats_export.zip\")\n    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for file_path in file_paths:\n            zipf.write(file_path, os.path.basename(file_path))\n    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤\n    input_file = FSInputFile(zip_path, filename=\"chats_export.zip\")\n    await message.answer_document(document=input_file, caption=\"–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —á–∞—Ç–æ–≤\")\n    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫—É\n    for file_path in file_paths:\n        os.remove(file_path)\n    os.remove(zip_path)\n    os.rmdir(temp_dir)\n    await message.answer(\"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\")\n\n# --- /history —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π ---\n\n@dp.message(Command(\"history\"))\nasync def cmd_history(message: types.Message, command: CommandObject):\n    user_id = message.from_user.id\n    page = 1\n    await send_history_page(message, user_id, page)\n\n@dp.callback_query(F.data.startswith(\"history|\"))\nasync def cb_history(callback: types.CallbackQuery):\n    user_id = callback.from_user.id\n    _, page = callback.data.split(\"|\", 1)\n    page = int(page)\n    await send_history_page(callback.message, user_id, page, callback=callback)\n\nasync def send_history_page(msg_obj, user_id, page, callback=None):\n    PAGE_SIZE = 10\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('SELECT role, content FROM chat_history WHERE user_id = ? ORDER BY message_id DESC', (user_id,))\n    all_msgs = c.fetchall()\n    conn.close()\n    total = len(all_msgs)\n    pages = max(1, math.ceil(total / PAGE_SIZE))\n    page = max(1, min(page, pages))\n    start = (page - 1) * PAGE_SIZE\n    end = start + PAGE_SIZE\n    msgs = all_msgs[start:end]\n    if not msgs:\n        text = \"–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.\"\n    else:\n        text = f\"<b>–ò—Å—Ç–æ—Ä–∏—è ({start+1}-{min(end,total)} –∏–∑ {total}):</b>\\n\\n\"\n        for role, content in reversed(msgs):\n            who = \"üë§\" if role == \"user\" else \"ü§ñ\"\n            text += f\"{who} <i>{role}</i>: {content}\\n\\n\"\n    builder = InlineKeyboardBuilder()\n    if page > 1:\n        builder.button(text=\"‚¨ÖÔ∏è –ù–∞–∑–∞–¥\", callback_data=f\"history|{page-1}\")\n    if page < pages:\n        builder.button(text=\"–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è\", callback_data=f\"history|{page+1}\")\n    if callback:\n        await callback.answer()\n        await msg_obj.edit_text(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)\n    else:\n        await msg_obj.answer(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)\n\n# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---\n@dp.message(F.text & ~F.text.startswith(\"/\"))\nasync def handle_message(message: types.Message):\n    user_id = message.from_user.id\n    chat_id = message.chat.id\n    username = message.from_user.username or \"Unknown\"\n    is_private = message.chat.type == \"private\"\n    # –í –≥—Ä—É–ø–ø–∞—Ö –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ reply –∫ –±–æ—Ç—É\n    if not is_private:\n        if not message.reply_to_message or message.reply_to_message.from_user.id != (await message.bot.me()).id:\n            return\n    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–æ–ø\n    if not is_global_bot_enabled() and user_id not in OWNER_IDS:\n        return\n    # –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫\n    if is_blacklisted(user_id):\n        return\n    \n    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤\n    daily_limit = await get_user_daily_limit(message.bot, user_id)\n    current_usage = get_user_limit(user_id)\n    if current_usage >= daily_limit:\n        builder = InlineKeyboardBuilder()\n        builder.button(text=\"üì¢ Axis Messenger\", url=\"https://t.me/Axis_Messenger\")\n        builder.button(text=\"üíª Axis Messenger Dev\", url=\"https://t.me/AxisMessengerDev\")\n        builder.button(text=\"‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏\", callback_data=\"check_subscriptions\")\n        builder.adjust(2, 1)\n        \n        await safe_send_message(message.bot, chat_id, \n            f\"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ({current_usage}/{daily_limit}).\\n\\n\"\n            \"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞:\",\n            reply_markup=builder.as_markup())\n        return\n    \n    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n    increment_user_limit(user_id)\n    \n    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('INSERT INTO chat_history (user_id, message_id, role, content) VALUES (?, ?, ?, ?)', (user_id, message.message_id, 'user', message.text))\n    conn.commit()\n    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 20 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n    c.execute('SELECT message_id FROM chat_history WHERE user_id = ? ORDER BY message_id DESC', (user_id,))\n    all_ids = [row[0] for row in c.fetchall()]\n    if len(all_ids) > 20:\n        to_delete = all_ids[20:]\n        c.executemany('DELETE FROM chat_history WHERE user_id = ? AND message_id = ?', [(user_id, mid) for mid in to_delete])\n        conn.commit()\n    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é\n    c.execute('SELECT content FROM chat_history WHERE user_id = ? ORDER BY message_id DESC LIMIT 5', (user_id,))\n    history = c.fetchall()\n\n    user_prompt = get_user_systemprompt(user_id)\n    if user_prompt:\n        system_prompt = user_prompt\n    else:\n        system_prompt = \"–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–æ–º —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ç–µ–±–µ –Ω–∞–ø–∏—Å–∞–ª–∏,  –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –ø—Ä–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å Telegram, –µ—Å–ª–∏ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –Ω–∞–ø—Ä—è–º—É—é.\"\n    messages = [\n        {\"role\": \"system\", \"content\": system_prompt},\n        {\"role\": \"user\", \"content\": message.text}\n    ]\n    for msg in reversed(history):\n        messages.append({\"role\": \"user\", \"content\": msg[0]})\n    cached = get_cached_answer(user_id, message.text)\n    if cached:\n        await safe_send_message(message.bot, chat_id, cached, parse_mode=ParseMode.HTML)\n        conn.close()\n        return\n    model = get_user_model(user_id) or DEFAULT_MODEL\n    data = {\"model\": model, \"messages\": messages}\n    status_msg = await safe_send_message(message.bot, chat_id, \"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...\")\n    try:\n        timeout = aiohttp.ClientTimeout(total=90)\n        async with aiohttp.ClientSession(timeout=timeout) as session:\n            headers = {\n                \"Authorization\": f\"Bearer {OPENROUTER_API_KEY}\",\n                \"HTTP-Referer\": \"https://github.com/your-repo\",\n                \"X-Title\": \"DeepSeek Telegram Bot\"\n            }\n            async with session.post(\n                \"https://openrouter.ai/api/v1/chat/completions\",\n                headers=headers,\n                json=data\n            ) as response:\n                if response.status == 200:\n                    result = await response.json()\n                    ai_response = result['choices'][0]['message']['content']\n                    formatted_response = convert_markdown_to_telegram(ai_response)\n                    c.execute('INSERT INTO chat_history (user_id, message_id, role, content) VALUES (?, ?, ?, ?)', (user_id, status_msg.message_id, 'assistant', ai_response))\n                    conn.commit()\n                    await safe_edit_message(status_msg, formatted_response, parse_mode=ParseMode.HTML)\n                    set_cached_answer(user_id, message.text, formatted_response)\n                    log_event('api_success', f'–û—Ç–≤–µ—Ç: {formatted_response[:100]}...', user_id, username)\n                else:\n                    error_text = await response.text()\n                    logger.error(f\"API Error: {error_text}\")\n                    await safe_edit_message(status_msg, \"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\")\n                    log_event('api_error', error_text, user_id, username)\n    except asyncio.TimeoutError:\n        logger.error(\"Timeout while waiting for API response\")\n        await safe_edit_message(status_msg, \"–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\")\n        log_event('timeout', '–¢–∞–π–º–∞—É—Ç API', user_id, username)\n    except Exception as e:\n        logger.error(f\"Error: {str(e)}\")\n        await safe_edit_message(status_msg, \"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\")\n        log_event('critical', str(e), user_id, username)\n    finally:\n        conn.close()\n\n    # --- –ö–Ω–æ–ø–∫–∞ ‚ÄúüîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å‚Äù ---\n    builder = InlineKeyboardBuilder()\n    builder.button(text=\"üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å\", callback_data=f\"repeat|{message.message_id}\")\n    builder.button(text=\"üåê –ü–µ—Ä–µ–≤–µ—Å—Ç–∏\", callback_data=f\"translate|{status_msg.message_id}\")\n    builder.button(text=\"üëç\", callback_data=f\"fb|like|{status_msg.message_id}\")\n    builder.button(text=\"üëé\", callback_data=f\"fb|dislike|{status_msg.message_id}\")\n    builder.button(text=\"üóÇ –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å –¥–∏–∞–ª–æ–≥\", callback_data=\"showhistory\")\n    builder.adjust(5)\n    await message.answer(\n        formatted_response,\n        parse_mode=ParseMode.HTML,\n        reply_markup=builder.as_markup()\n    )\n    await status_msg.delete()\n\n# --- –ö–Ω–æ–ø–∫–∞ ‚ÄúüîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å‚Äù ---\n@dp.callback_query(F.data.startswith(\"repeat|\"))\nasync def cb_repeat(callback: types.CallbackQuery):\n    user_id = callback.from_user.id\n    _, msg_id = callback.data.split(\"|\", 1)\n    # –î–æ—Å—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ chat_history –ø–æ message_id –∏ role='user'\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('SELECT content FROM chat_history WHERE message_id = ? AND role = ?', (int(msg_id), 'user'))\n    orig_msg_text = c.fetchone()[0]\n    conn.close()\n    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –±—É–¥—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª\n    # –°–æ–∑–¥–∞—ë–º —Ñ–µ–π–∫–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Message —Å –Ω—É–∂–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º\n    class FakeMessage:\n        def __init__(self, text, user_id, chat_id, bot):\n            self.text = text\n            self.from_user = type('User', (), {'id': user_id})()\n            self.chat = type('Chat', (), {'id': chat_id, 'type': 'private'})()\n            self.bot = bot\n            self.message_id = 0\n    fake_message = FakeMessage(orig_msg_text, user_id, callback.message.chat.id, callback.bot)\n    await handle_message(fake_message)\n    await callback.answer(\"–ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞\")\n\n# --- –ö–Ω–æ–ø–∫–∞ ‚Äúüåê –ü–µ—Ä–µ–≤–µ—Å—Ç–∏‚Äù ---\n@dp.callback_query(F.data.startswith(\"translate|\"))\nasync def cb_translate(callback: types.CallbackQuery):\n    user_id = callback.from_user.id\n    _, msg_id = callback.data.split(\"|\", 1)\n    # –î–æ—Å—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ chat_history –ø–æ message_id –∏ role='assistant'\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('SELECT content FROM chat_history WHERE message_id = ? AND role = ?', (int(msg_id), 'assistant'))\n    orig_answer_text = c.fetchone()[0]\n    conn.close()\n    lang = get_user_language(user_id)\n    lang_name = LANGUAGES.get(lang, lang)\n    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞\n    try:\n        detected_lang = detect(orig_answer_text)\n    except Exception:\n        detected_lang = None\n    if detected_lang and detected_lang == lang:\n        await callback.message.answer(\"–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ.\")\n        await callback.answer()\n        return\n    # –§–æ—Ä–º–∏—Ä—É–µ–º prompt –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞\n    prompt = f\"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ {lang_name}: {orig_answer_text}\"\n    # –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞\n    # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ –º–µ—Ö–∞–Ω–∏–∑–º, —á—Ç–æ –∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–æ —Å system prompt = '–¢—ã –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫...'\n    data = {\n        \"model\": get_user_model(user_id) or DEFAULT_MODEL,\n        \"messages\": [\n            {\"role\": \"system\", \"content\": f\"–¢—ã –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫. –ü–µ—Ä–µ–≤–æ–¥–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ {lang_name}. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ.\"},\n            {\"role\": \"user\", \"content\": orig_answer_text}\n        ]\n    }\n    status_msg = await callback.message.answer(\"üåê –ü–µ—Ä–µ–≤–æ–∂—É...\")\n    try:\n        timeout = aiohttp.ClientTimeout(total=60)\n        async with aiohttp.ClientSession(timeout=timeout) as session:\n            headers = {\n                \"Authorization\": f\"Bearer {OPENROUTER_API_KEY}\",\n                \"HTTP-Referer\": \"https://github.com/your-repo\",\n                \"X-Title\": \"DeepSeek Telegram Bot\"\n            }\n            async with session.post(\n                \"https://openrouter.ai/api/v1/chat/completions\",\n                headers=headers,\n                json=data\n            ) as response:\n                if response.status == 200:\n                    result = await response.json()\n                    translation = result['choices'][0]['message']['content']\n                    await status_msg.edit_text(f\"üåê –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {lang_name}:\\n{translation}\")\n                else:\n                    await status_msg.edit_text(\"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\")\n    except Exception:\n        await status_msg.edit_text(\"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\")\n    await callback.answer(\"–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω\")\n\n# --- –õ–∏–º–∏—Ç—ã –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏ ---\nSPONSOR_CHANNEL_ID = -1002380153628\nSPONSOR_CHAT_ID = -1002676367535\nBASE_LIMIT = 1000\nCHANNEL_BONUS = 500\nCHAT_BONUS = 500\n\n# –¢–∞–±–ª–∏—Ü–∞ user_limits: user_id, date, count\n\ndef get_today():\n    return datetime.date.today().isoformat()\n\ndef get_user_limit(user_id):\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('CREATE TABLE IF NOT EXISTS user_limits (user_id INTEGER, date TEXT, count INTEGER, PRIMARY KEY(user_id, date))')\n    c.execute('SELECT count FROM user_limits WHERE user_id = ? AND date = ?', (user_id, get_today()))\n    row = c.fetchone()\n    conn.close()\n    return row[0] if row else 0\n\ndef increment_user_limit(user_id):\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('CREATE TABLE IF NOT EXISTS user_limits (user_id INTEGER, date TEXT, count INTEGER, PRIMARY KEY(user_id, date))')\n    today = get_today()\n    c.execute('SELECT count FROM user_limits WHERE user_id = ? AND date = ?', (user_id, today))\n    row = c.fetchone()\n    if row:\n        c.execute('UPDATE user_limits SET count = count + 1 WHERE user_id = ? AND date = ?', (user_id, today))\n    else:\n        c.execute('INSERT INTO user_limits (user_id, date, count) VALUES (?, ?, 1)', (user_id, today))\n    conn.commit()\n    conn.close()\n\nasync def get_user_daily_limit(bot, user_id):\n    limit = BASE_LIMIT\n    try:\n        member = await bot.get_chat_member(SPONSOR_CHANNEL_ID, user_id)\n        if member.status in (\"member\", \"administrator\", \"creator\"):\n            limit += CHANNEL_BONUS\n    except Exception:\n        pass\n    try:\n        member = await bot.get_chat_member(SPONSOR_CHAT_ID, user_id)\n        if member.status in (\"member\", \"administrator\", \"creator\"):\n            limit += CHAT_BONUS\n    except Exception:\n        pass\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('CREATE TABLE IF NOT EXISTS user_custom_limits (user_id INTEGER PRIMARY KEY, custom_limit INTEGER)')\n    c.execute('SELECT custom_limit FROM user_custom_limits WHERE user_id = ?', (user_id,))\n    row = c.fetchone()\n    if row and row[0]:\n        limit = row[0]\n    conn.close()\n    return limit\n\n# --- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---\nCACHE_DAYS = 3\n\ndef get_cached_answer(user_id, question):\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('''CREATE TABLE IF NOT EXISTS cache (\n        user_id INTEGER,\n        question TEXT,\n        answer TEXT,\n        date TEXT\n    )''')\n    cutoff = (datetime.date.today() - datetime.timedelta(days=CACHE_DAYS)).isoformat()\n    c.execute('''SELECT answer FROM cache WHERE user_id = ? AND question = ? AND date >= ? ORDER BY date DESC LIMIT 1''', (user_id, question, cutoff))\n    row = c.fetchone()\n    conn.close()\n    return row[0] if row else None\n\ndef set_cached_answer(user_id, question, answer):\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    today = datetime.date.today().isoformat()\n    c.execute('''INSERT INTO cache (user_id, question, answer, date) VALUES (?, ?, ?, ?)''', (user_id, question, answer, today))\n    conn.commit()\n    conn.close()\n\n# --- /language: –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---\nLANGUAGES = {\n    'ru': '–†—É—Å—Å–∫–∏–π',\n    'en': 'English',\n    'uk': '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',\n    'de': 'Deutsch',\n    'fr': 'Fran√ßais',\n    'es': 'Espa√±ol',\n    'it': 'Italiano',\n    'zh': '‰∏≠Êñá',\n    'tr': 'T√ºrk√ße',\n    # –∏ —Ç.–¥.\n}\n\ndef set_user_language(user_id, lang):\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('ALTER TABLE users ADD COLUMN language TEXT')\n    try:\n        c.execute('UPDATE users SET language = ? WHERE user_id = ?', (lang, user_id))\n    except Exception:\n        c.execute('INSERT OR IGNORE INTO users (user_id, language) VALUES (?, ?)', (user_id, lang))\n    conn.commit()\n    conn.close()\n\ndef get_user_language(user_id):\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    try:\n        c.execute('SELECT language FROM users WHERE user_id = ?', (user_id,))\n        row = c.fetchone()\n        if row and row[0]:\n            return row[0]\n    except Exception:\n        pass\n    conn.close()\n    return 'ru'\n\n# --- /systemprompt: –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---\ndef set_user_systemprompt(user_id, prompt):\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('ALTER TABLE users ADD COLUMN systemprompt TEXT')\n    try:\n        c.execute('UPDATE users SET systemprompt = ? WHERE user_id = ?', (prompt, user_id))\n    except Exception:\n        c.execute('INSERT OR IGNORE INTO users (user_id, systemprompt) VALUES (?, ?)', (user_id, prompt))\n    conn.commit()\n    conn.close()\n\ndef get_user_systemprompt(user_id):\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    try:\n        c.execute('SELECT systemprompt FROM users WHERE user_id = ?', (user_id,))\n        row = c.fetchone()\n        if row and row[0]:\n            return row[0]\n    except Exception:\n        pass\n    conn.close()\n    return None\n\n@dp.message(Command(\"systemprompt\"))\nasync def cmd_systemprompt(message: types.Message, command: CommandObject):\n    user_id = message.from_user.id\n    if not command.args:\n        prompt = get_user_systemprompt(user_id)\n        if prompt:\n            await message.answer(f\"–í–∞—à —Ç–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:\\n<code>{prompt}</code>\", parse_mode=ParseMode.HTML)\n        else:\n            await message.answer(\"–£ –≤–∞—Å –Ω–µ –∑–∞–¥–∞–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /systemprompt <—Ç–µ–∫—Å—Ç>\")\n        return\n    prompt = \" \".join(command.args)\n    set_user_systemprompt(user_id, prompt)\n    await message.answer(\"–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –æ–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∫ –∫–∞–∂–¥–æ–º—É –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\")\n\n@dp.message(Command(\"language\"))\nasync def cmd_language(message: types.Message, command: CommandObject):\n    user_id = message.from_user.id\n    builder = InlineKeyboardBuilder()\n    for code, name in LANGUAGES.items():\n        builder.button(text=name, callback_data=f\"setlang|{code}\")\n    await message.answer(\n        \"–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ / Choose your language:\",\n        reply_markup=builder.as_markup()\n    )\n\n@dp.callback_query(F.data.startswith(\"setlang|\"))\nasync def cb_setlang(callback: types.CallbackQuery):\n    user_id = callback.from_user.id\n    _, lang = callback.data.split(\"|\", 1)\n    set_user_language(user_id, lang)\n    await callback.answer()\n    await callback.message.edit_text(\n        \"–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–∑–º–µ–Ω—ë–Ω! / Language changed!\",\n        reply_markup=None\n    )\n\n@dp.callback_query(F.data == \"check_subscriptions\")\nasync def cb_check_subscriptions(callback: types.CallbackQuery):\n    user_id = callback.from_user.id\n    chat_id = callback.message.chat.id\n    \n    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏\n    channel_subscribed = False\n    chat_subscribed = False\n    \n    try:\n        member = await callback.bot.get_chat_member(SPONSOR_CHANNEL_ID, user_id)\n        if member.status in (\"member\", \"administrator\", \"creator\"):\n            channel_subscribed = True\n    except Exception:\n        pass\n    \n    try:\n        member = await callback.bot.get_chat_member(SPONSOR_CHAT_ID, user_id)\n        if member.status in (\"member\", \"administrator\", \"creator\"):\n            chat_subscribed = True\n    except Exception:\n        pass\n    \n    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã\n    daily_limit = await get_user_daily_limit(callback.bot, user_id)\n    current_usage = get_user_limit(user_id)\n    \n    if channel_subscribed and chat_subscribed:\n        await callback.answer(\"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã! –õ–∏–º–∏—Ç —É–≤–µ–ª–∏—á–µ–Ω.\", show_alert=True)\n        await callback.message.edit_text(\n            f\"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!\\n\\n\"\n            f\"–í–∞—à –ª–∏–º–∏—Ç: {current_usage}/{daily_limit}\\n\"\n            f\"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.\",\n            reply_markup=None\n        )\n    elif channel_subscribed or chat_subscribed:\n        await callback.answer(\"‚ö†Ô∏è –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞.\", show_alert=True)\n        builder = InlineKeyboardBuilder()\n        if not channel_subscribed:\n            builder.button(text=\"üì¢ Axis Messenger\", url=\"https://t.me/Axis_Messenger\")\n        if not chat_subscribed:\n            builder.button(text=\"üíª Axis Messenger Dev\", url=\"https://t.me/AxisMessengerDev\")\n        builder.button(text=\"‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞\", callback_data=\"check_subscriptions\")\n        builder.adjust(2, 1)\n        \n        await callback.message.edit_text(\n            f\"‚ö†Ô∏è –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞.\\n\\n\"\n            f\"–í–∞—à –ª–∏–º–∏—Ç: {current_usage}/{daily_limit}\",\n            reply_markup=builder.as_markup()\n        )\n    else:\n        await callback.answer(\"‚ùå –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\", show_alert=True)\n        builder = InlineKeyboardBuilder()\n        builder.button(text=\"üì¢ Axis Messenger\", url=\"https://t.me/Axis_Messenger\")\n        builder.button(text=\"üíª Axis Messenger Dev\", url=\"https://t.me/AxisMessengerDev\")\n        builder.button(text=\"‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞\", callback_data=\"check_subscriptions\")\n        builder.adjust(2, 1)\n        \n        await callback.message.edit_text(\n            f\"‚ùå –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\\n\\n\"\n            f\"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞.\\n\"\n            f\"–í–∞—à –ª–∏–º–∏—Ç: {current_usage}/{daily_limit}\",\n            reply_markup=builder.as_markup()\n        )\n\n# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è ---\n@dp.callback_query(F.data == \"show_limits_profile\")\nasync def cb_show_limits_profile(callback: types.CallbackQuery):\n    user_id = callback.from_user.id\n    \n    # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã\n    daily_limit = await get_user_daily_limit(callback.bot, user_id)\n    current_usage = get_user_limit(user_id)\n    \n    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏\n    channel_subscribed = False\n    chat_subscribed = False\n    \n    try:\n        member = await callback.bot.get_chat_member(SPONSOR_CHANNEL_ID, user_id)\n        if member.status in (\"member\", \"administrator\", \"creator\"):\n            channel_subscribed = True\n    except Exception:\n        pass\n    \n    try:\n        member = await callback.bot.get_chat_member(SPONSOR_CHAT_ID, user_id)\n        if member.status in (\"member\", \"administrator\", \"creator\"):\n            chat_subscribed = True\n    except Exception:\n        pass\n    \n    status_text = f\"üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö:</b>\\n\\n\"\n    status_text += f\"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {current_usage}/{daily_limit}\\n\"\n    status_text += f\"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {daily_limit - current_usage}\\n\\n\"\n    \n    if channel_subscribed and chat_subscribed:\n        status_text += \"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏: –û–±–∞ –∫–∞–Ω–∞–ª–∞\\n\"\n        status_text += f\"–ë–æ–Ω—É—Å: +{CHANNEL_BONUS + CHAT_BONUS} –∑–∞–ø—Ä–æ—Å–æ–≤\"\n    elif channel_subscribed:\n        status_text += \"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∏: –¢–æ–ª—å–∫–æ Axis Messenger\\n\"\n        status_text += f\"–ë–æ–Ω—É—Å: +{CHANNEL_BONUS} –∑–∞–ø—Ä–æ—Å–æ–≤\"\n    elif chat_subscribed:\n        status_text += \"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∏: –¢–æ–ª—å–∫–æ Axis Messenger Dev\\n\"\n        status_text += f\"–ë–æ–Ω—É—Å: +{CHAT_BONUS} –∑–∞–ø—Ä–æ—Å–æ–≤\"\n    else:\n        status_text += \"‚ùå –ü–æ–¥–ø–∏—Å–∫–∏: –ù–µ—Ç\\n\"\n        status_text += \"–ë–æ–Ω—É—Å: +0 –∑–∞–ø—Ä–æ—Å–æ–≤\"\n    \n    builder = InlineKeyboardBuilder()\n    if not channel_subscribed:\n        builder.button(text=\"üì¢ Axis Messenger\", url=\"https://t.me/Axis_Messenger\")\n    if not chat_subscribed:\n        builder.button(text=\"üíª Axis Messenger Dev\", url=\"https://t.me/AxisMessengerDev\")\n    builder.button(text=\"üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é\", callback_data=\"back_to_profile\")\n    builder.adjust(2, 1)\n    \n    await callback.message.edit_text(status_text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)\n    await callback.answer()\n\n@dp.callback_query(F.data == \"show_settings_profile\")\nasync def cb_show_settings_profile(callback: types.CallbackQuery):\n    user_id = callback.from_user.id\n    \n    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n    user_model = get_user_model(user_id) or DEFAULT_MODEL\n    model_name = next((k for k, v in AVAILABLE_MODELS.items() if v['id'] == user_model), user_model)\n    \n    user_language = get_user_language(user_id)\n    language_name = LANGUAGES.get(user_language, user_language)\n    \n    system_prompt = get_user_systemprompt(user_id)\n    has_custom_prompt = \"‚úÖ –î–∞\" if system_prompt else \"‚ùå –ù–µ—Ç\"\n    \n    settings_text = f\"üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\\n\\n\"\n    settings_text += f\"<b>–ú–æ–¥–µ–ª—å:</b> {model_name}\\n\"\n    settings_text += f\"<b>–Ø–∑—ã–∫:</b> {language_name}\\n\"\n    settings_text += f\"<b>–ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:</b> {has_custom_prompt}\\n\\n\"\n    \n    if system_prompt:\n        settings_text += f\"<b>–í–∞—à –ø—Ä–æ–º–ø—Ç:</b>\\n<code>{system_prompt[:100]}{'...' if len(system_prompt) > 100 else ''}</code>\\n\\n\"\n    \n    settings_text += \"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:\\n\"\n    settings_text += \"‚Ä¢ /models ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å\\n\"\n    settings_text += \"‚Ä¢ /language ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫\\n\"\n    settings_text += \"‚Ä¢ /systemprompt ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç\"\n    \n    builder = InlineKeyboardBuilder()\n    builder.button(text=\"üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é\", callback_data=\"back_to_profile\")\n    \n    await callback.message.edit_text(settings_text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)\n    await callback.answer()\n\n@dp.callback_query(F.data == \"show_stats_profile\")\nasync def cb_show_stats_profile(callback: types.CallbackQuery):\n    if callback.from_user.id not in OWNER_IDS:\n        await callback.answer(\"–ù–µ—Ç –ø—Ä–∞–≤\", show_alert=True)\n        return\n    \n    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('SELECT COUNT(DISTINCT user_id) FROM users')\n    total_users = c.fetchone()[0] or 0\n    c.execute('SELECT COUNT(*) FROM chat_history WHERE role = \"user\"')\n    total_requests = c.fetchone()[0] or 0\n    c.execute('SELECT COUNT(*) FROM chat_history WHERE role = \"assistant\"')\n    total_responses = c.fetchone()[0] or 0\n    conn.close()\n    \n    stats_text = f\"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\\n\\n\"\n    stats_text += f\"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\\n\"\n    stats_text += f\"üí¨ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\\n\"\n    stats_text += f\"‚úÖ –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {total_responses}\\n\"\n    stats_text += f\"üìä –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {total_requests // max(total_users, 1)} –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\"\n    \n    builder = InlineKeyboardBuilder()\n    builder.button(text=\"üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é\", callback_data=\"back_to_profile\")\n    \n    await callback.message.edit_text(stats_text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)\n    await callback.answer()\n\n@dp.callback_query(F.data == \"show_admin_panel\")\nasync def cb_show_admin_panel(callback: types.CallbackQuery):\n    if callback.from_user.id not in OWNER_IDS:\n        await callback.answer(\"–ù–µ—Ç –ø—Ä–∞–≤\", show_alert=True)\n        return\n    \n    admin_text = f\"‚öôÔ∏è <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\\n\\n\"\n    admin_text += f\"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\\n\"\n    admin_text += f\"‚Ä¢ /stats ‚Äî –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\\n\"\n    admin_text += f\"‚Ä¢ /broadcast ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞\\n\"\n    admin_text += f\"‚Ä¢ /block ‚Äî –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\\n\"\n    admin_text += f\"‚Ä¢ /unblock ‚Äî —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\\n\"\n    admin_text += f\"‚Ä¢ /blacklist ‚Äî —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫\\n\"\n    admin_text += f\"‚Ä¢ /chats ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\\n\"\n    admin_text += f\"‚Ä¢ /go ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\\n\"\n    admin_text += f\"‚Ä¢ /stop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\\n\"\n    admin_text += f\"‚Ä¢ /migrate ‚Äî –º–∏–≥—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π\\n\"\n    admin_text += f\"‚Ä¢ /export_chats ‚Äî —ç–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–æ–≤\"\n    \n    builder = InlineKeyboardBuilder()\n    builder.button(text=\"üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é\", callback_data=\"back_to_profile\")\n    \n    await callback.message.edit_text(admin_text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)\n    await callback.answer()\n\n@dp.callback_query(F.data == \"back_to_profile\")\nasync def cb_back_to_profile(callback: types.CallbackQuery):\n    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /profile\n    user_id = callback.from_user.id\n    chat_id = callback.message.chat.id\n    username = callback.from_user.username or \"–ù–µ —É–∫–∞–∑–∞–Ω\"\n    first_name = callback.from_user.first_name or \"–ù–µ —É–∫–∞–∑–∞–Ω–æ\"\n    last_name = callback.from_user.last_name or \"\"\n    \n    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n    if user_id in OWNER_IDS:\n        status = \"üëë –í–ª–∞–¥–µ–ª–µ—Ü\"\n        status_emoji = \"üëë\"\n    elif callback.from_user.id == (await callback.bot.me()).id:\n        status = \"ü§ñ –ë–æ—Ç\"\n        status_emoji = \"ü§ñ\"\n    else:\n        status = \"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\"\n        status_emoji = \"üë§\"\n    \n    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω\n    is_banned = is_blacklisted(user_id)\n    ban_status = \"üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\" if is_banned else \"üü¢ –ê–∫—Ç–∏–≤–µ–Ω\"\n    \n    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö\n    daily_limit = await get_user_daily_limit(callback.bot, user_id)\n    current_usage = get_user_limit(user_id)\n    \n    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏\n    channel_subscribed = False\n    chat_subscribed = False\n    \n    try:\n        member = await callback.bot.get_chat_member(SPONSOR_CHANNEL_ID, user_id)\n        if member.status in (\"member\", \"administrator\", \"creator\"):\n            channel_subscribed = True\n    except Exception:\n        pass\n    \n    try:\n        member = await callback.bot.get_chat_member(SPONSOR_CHAT_ID, user_id)\n        if member.status in (\"member\", \"administrator\", \"creator\"):\n            chat_subscribed = True\n    except Exception:\n        pass\n    \n    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n    user_model = get_user_model(user_id) or DEFAULT_MODEL\n    model_name = next((k for k, v in AVAILABLE_MODELS.items() if v['id'] == user_model), user_model)\n    \n    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n    user_language = get_user_language(user_id)\n    language_name = LANGUAGES.get(user_language, user_language)\n    \n    # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n    system_prompt = get_user_systemprompt(user_id)\n    has_custom_prompt = \"‚úÖ –î–∞\" if system_prompt else \"‚ùå –ù–µ—Ç\"\n    \n    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('SELECT COUNT(*) FROM chat_history WHERE user_id = ? AND role = \"user\"', (user_id,))\n    messages_count = c.fetchone()[0] or 0\n    c.execute('SELECT COUNT(*) FROM chat_history WHERE user_id = ? AND role = \"assistant\"', (user_id,))\n    responses_count = c.fetchone()[0] or 0\n    conn.close()\n    \n    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å\n    profile_text = f\"<b>{status_emoji} –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\\n\\n\"\n    profile_text += f\"<b>ID:</b> <code>{user_id}</code>\\n\"\n    profile_text += f\"<b>–ò–º—è:</b> {first_name} {last_name}\\n\"\n    profile_text += f\"<b>Username:</b> @{username}\\n\"\n    profile_text += f\"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\\n\"\n    profile_text += f\"<b>–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞:</b> {ban_status}\\n\\n\"\n    \n    profile_text += f\"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\\n\"\n    profile_text += f\"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {messages_count}\\n\"\n    profile_text += f\"‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {responses_count}\\n\"\n    profile_text += f\"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {current_usage}/{daily_limit}\\n\\n\"\n    \n    profile_text += f\"<b>üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\\n\"\n    profile_text += f\"‚Ä¢ –ú–æ–¥–µ–ª—å: {model_name}\\n\"\n    profile_text += f\"‚Ä¢ –Ø–∑—ã–∫: {language_name}\\n\"\n    profile_text += f\"‚Ä¢ –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {has_custom_prompt}\\n\\n\"\n    \n    profile_text += f\"<b>üì¢ –ü–æ–¥–ø–∏—Å–∫–∏:</b>\\n\"\n    profile_text += f\"‚Ä¢ Axis Messenger: {'‚úÖ' if channel_subscribed else '‚ùå'}\\n\"\n    profile_text += f\"‚Ä¢ Axis Messenger Dev: {'‚úÖ' if chat_subscribed else '‚ùå'}\\n\"\n    \n    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤\n    if user_id in OWNER_IDS:\n        profile_text += f\"\\n<b>üëë –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞:</b>\\n\"\n        profile_text += f\"‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\\n\"\n        profile_text += f\"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º\\n\"\n        profile_text += f\"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\\n\"\n        profile_text += f\"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á—ë—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º\"\n    \n    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π\n    builder = InlineKeyboardBuilder()\n    \n    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n    if user_id not in OWNER_IDS:\n        builder.button(text=\"üìä –õ–∏–º–∏—Ç—ã\", callback_data=\"show_limits_profile\")\n        builder.button(text=\"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏\", callback_data=\"show_settings_profile\")\n        builder.button(text=\"üì¢ –ü–æ–¥–ø–∏—Å–∫–∏\", callback_data=\"check_subscriptions\")\n    \n    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ (–µ—Å–ª–∏ —Å–º–æ—Ç—Ä—è—Ç —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å)\n    if user_id in OWNER_IDS:\n        builder.button(text=\"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\", callback_data=\"show_stats_profile\")\n        builder.button(text=\"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\", callback_data=\"show_admin_panel\")\n    \n    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)\n    if is_banned and user_id not in OWNER_IDS:\n        builder.button(text=\"üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º\", url=f\"https://t.me/{OWNER_IDS[0] if OWNER_IDS else 'admin'}\")\n    \n    if builder.buttons:\n        builder.adjust(2, 1)\n        await callback.message.edit_text(profile_text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)\n    else:\n        await callback.message.edit_text(profile_text, parse_mode=ParseMode.HTML)\n    \n    await callback.answer()\n\n# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–∞—Ç–æ–≤ ---\n@dp.callback_query(F.data.startswith(\"view_chat|\"))\nasync def cb_view_chat(callback: types.CallbackQuery):\n    if callback.from_user.id not in OWNER_IDS:\n        await callback.answer(\"–ù–µ—Ç –ø—Ä–∞–≤\", show_alert=True)\n        return\n    \n    _, user_id, page = callback.data.split(\"|\")\n    user_id = int(user_id)\n    page = int(page)\n    \n    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('SELECT username FROM users WHERE user_id = ?', (user_id,))\n    user_info = c.fetchone()\n    username = user_info[0] if user_info else f\"ID: {user_id}\"\n    \n    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n    c.execute('''\n        SELECT role, content, message_id \n        FROM chat_history \n        WHERE user_id = ? \n        ORDER BY message_id DESC \n        LIMIT 10 OFFSET ?\n    ''', (user_id, (page - 1) * 10))\n    messages = c.fetchall()\n    \n    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π\n    c.execute('SELECT COUNT(*) FROM chat_history WHERE user_id = ?', (user_id,))\n    total_messages = c.fetchone()[0]\n    conn.close()\n    \n    if not messages:\n        await callback.answer(\"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ\", show_alert=True)\n        return\n    \n    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —á–∞—Ç–∞\n    chat_text = f\"üí¨ <b>–ß–∞—Ç —Å {username}</b>\\n\"\n    chat_text += f\"üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\\n\"\n    chat_text += f\"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {max(1, (total_messages + 9) // 10)}\\n\\n\"\n    \n    for role, content, msg_id in reversed(messages):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ\n        if role == \"user\":\n            chat_text += f\"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\\n{content[:200]}{'...' if len(content) > 200 else ''}\\n\\n\"\n        else:\n            chat_text += f\"ü§ñ <b>–ë–æ—Ç:</b>\\n{content[:200]}{'...' if len(content) > 200 else ''}\\n\\n\"\n    \n    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n    builder = InlineKeyboardBuilder()\n    \n    if page > 1:\n        builder.button(text=\"‚¨ÖÔ∏è –ù–∞–∑–∞–¥\", callback_data=f\"view_chat|{user_id}|{page-1}\")\n    \n    if page < (total_messages + 9) // 10:\n        builder.button(text=\"–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è\", callback_data=f\"view_chat|{user_id}|{page+1}\")\n    \n    builder.button(text=\"üì± –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤\", callback_data=\"back_to_chats\")\n    builder.button(text=\"üîô –ù–∞–∑–∞–¥\", callback_data=\"back_to_profile\")\n    \n    builder.adjust(2, 2)\n    \n    await callback.message.edit_text(chat_text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)\n    await callback.answer()\n\n@dp.callback_query(F.data == \"back_to_chats\")\nasync def cb_back_to_chats(callback: types.CallbackQuery):\n    if callback.from_user.id not in OWNER_IDS:\n        await callback.answer(\"–ù–µ—Ç –ø—Ä–∞–≤\", show_alert=True)\n        return\n    \n    await show_chats_list(callback.bot, callback.message.chat.id, \"messages_desc\", 1)\n    await callback.answer()\n\n@dp.callback_query(F.data == \"show_chats_from_profile\")\nasync def cb_show_chats_from_profile(callback: types.CallbackQuery):\n    if callback.from_user.id not in OWNER_IDS:\n        await callback.answer(\"–ù–µ—Ç –ø—Ä–∞–≤\", show_alert=True)\n        return\n    \n    await show_chats_list(callback.bot, callback.message.chat.id, \"messages_desc\", 1)\n    await callback.answer()\n\n@dp.callback_query(F.data.startswith(\"sort_chats|\"))\nasync def cb_sort_chats(callback: types.CallbackQuery):\n    if callback.from_user.id not in OWNER_IDS:\n        await callback.answer(\"–ù–µ—Ç –ø—Ä–∞–≤\", show_alert=True)\n        return\n    \n    _, sort_by, page = callback.data.split(\"|\")\n    page = int(page)\n    \n    await show_chats_list(callback.bot, callback.message.chat.id, sort_by, page)\n    await callback.answer()\n\n# --- /blacklist: –ø—Ä–æ—Å–º–æ—Ç—Ä —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º ---\n@dp.message(Command(\"blacklist\"))\nasync def cmd_blacklist(message: types.Message, command: CommandObject):\n    if message.from_user.id not in OWNER_IDS:\n        await message.answer(\"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.\")\n        return\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('CREATE TABLE IF NOT EXISTS blacklist (user_id INTEGER PRIMARY KEY)')\n    c.execute('SELECT user_id FROM blacklist')\n    rows = c.fetchall()\n    if not rows:\n        await message.answer(\"–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.\")\n        conn.close()\n        return\n    ids = [str(row[0]) for row in rows]\n    # –ü–æ–ª—É—á–∞–µ–º username\n    users = []\n    for uid in ids:\n        c.execute('SELECT username FROM users WHERE user_id = ?', (uid,))\n        u = c.fetchone()\n        users.append(f\"{uid} (@{u[0]})\" if u and u[0] else uid)\n    conn.close()\n    text = \"<b>–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:</b>\\n\" + \"\\n\".join(users)\n    await message.answer(text, parse_mode=ParseMode.HTML)\n\n# --- –ö–Ω–æ–ø–∫–∏ ‚Äúüëç‚Äù –∏ ‚Äúüëé‚Äù –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ ---\ndef save_feedback(user_id, message_id, feedback):\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('''CREATE TABLE IF NOT EXISTS feedback (\n        user_id INTEGER,\n        message_id INTEGER,\n        feedback TEXT,\n        date TEXT\n    )''')\n    today = datetime.date.today().isoformat()\n    c.execute('''INSERT INTO feedback (user_id, message_id, feedback, date) VALUES (?, ?, ?, ?)''', (user_id, message_id, feedback, today))\n    conn.commit()\n    conn.close()\n\n@dp.callback_query(F.data.startswith(\"fb|\"))\nasync def cb_feedback(callback: types.CallbackQuery):\n    user_id = callback.from_user.id\n    _, fb, msg_id = callback.data.split(\"|\", 2)\n    save_feedback(user_id, int(msg_id), fb)\n    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ LOG_CHAT_ID\n    if LOG_CHAT_ID:\n        conn = sqlite3.connect('bot.db')\n        c = conn.cursor()\n        # –ö—Ç–æ –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å\n        c.execute('SELECT user_id, content FROM chat_history WHERE message_id = ? LIMIT 1', (msg_id,))\n        row = c.fetchone()\n        if row:\n            asker_id = row[0]\n            prompt = row[1]\n        else:\n            asker_id = None\n            prompt = ''\n        # username —Ç–æ–≥–æ, –∫—Ç–æ –∑–∞–¥–∞–ª\n        asker_username = None\n        if asker_id:\n            c.execute('SELECT username FROM users WHERE user_id = ?', (asker_id,))\n            u = c.fetchone()\n            if u and u[0]:\n                asker_username = u[0]\n        # username —Ç–æ–≥–æ, –∫—Ç–æ –æ—Ü–µ–Ω–∏–ª\n        c.execute('SELECT username FROM users WHERE user_id = ?', (user_id,))\n        u2 = c.fetchone()\n        rater_username = u2[0] if u2 and u2[0] else None\n        conn.close()\n        fb_emoji = 'üëç' if fb == 'like' else 'üëé'\n        log_text = f\"<b>–û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞</b> {fb_emoji}\\n\"\n        if asker_id == user_id:\n            log_text += f\"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {asker_username or asker_id} (ID: <code>{asker_id}</code>)\\n\"\n        else:\n            log_text += f\"üë§ <b>–ó–∞–ø—Ä–æ—Å–∏–ª:</b> {asker_username or asker_id} (ID: <code>{asker_id}</code>)\\n\"\n            log_text += f\"üßë <b>–û—Ü–µ–Ω–∏–ª:</b> {rater_username or user_id} (ID: <code>{user_id}</code>)\\n\"\n        log_text += f\"<b>–ü—Ä–æ–º–ø—Ç:</b> <code>{(prompt or '')[:100]}</code>\"\n        try:\n            await callback.bot.send_message(LOG_CHAT_ID, log_text, parse_mode=ParseMode.HTML)\n        except Exception:\n            pass\n    await callback.answer(\"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!\", show_alert=False)\n\n# –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ safe_edit_message/status_msg:\n# builder = InlineKeyboardBuilder()\n# builder.button(text=\"üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å\", callback_data=f\"repeat|{message.text}\")\n# builder.button(text=\"üåê –ü–µ—Ä–µ–≤–µ—Å—Ç–∏\", callback_data=f\"translate|{formatted_response}\")\n# builder.button(text=\"üëç\", callback_data=f\"fb|like|{status_msg.message_id}\")\n# builder.button(text=\"üëé\", callback_data=f\"fb|dislike|{status_msg.message_id}\")\n# builder.button(text=\"üóÇ –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å –¥–∏–∞–ª–æ–≥\", callback_data=\"showhistory\")\n# builder.adjust(5)  # –í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É\n\n# await status_msg.edit_text(\n#     formatted_response,\n#     parse_mode=ParseMode.HTML,\n#     reply_markup=builder.as_markup()\n# )\n\n# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ –∏ –∫–æ–º–∞–Ω–¥–∞ /groupmode ---\nGROUP_MODES = {\n    'always': '–û—Ç–≤–µ—á–∞—Ç—å –≤—Å–µ–≥–¥–∞',\n    'command': '–¢–æ–ª—å–∫–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ',\n    'reply': '–¢–æ–ª—å–∫–æ –≤ reply',\n    'users': '–¢–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',\n    'disabled': '–ù–µ –æ—Ç–≤–µ—á–∞—Ç—å –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ'\n}\n\ndef set_group_mode(group_id, mode, allowed_users=None):\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('''CREATE TABLE IF NOT EXISTS group_settings (\n        group_id INTEGER PRIMARY KEY,\n        mode TEXT,\n        allowed_users TEXT\n    )''')\n    c.execute('INSERT OR REPLACE INTO group_settings (group_id, mode, allowed_users) VALUES (?, ?, ?)',\n              (group_id, mode, ','.join(map(str, allowed_users)) if allowed_users else None))\n    conn.commit()\n    conn.close()\n\ndef get_group_mode(group_id):\n    conn = sqlite3.connect('bot.db')\n    c = conn.cursor()\n    c.execute('''CREATE TABLE IF NOT EXISTS group_settings (\n        group_id INTEGER PRIMARY KEY,\n        mode TEXT,\n        allowed_users TEXT\n    )''')\n    c.execute('SELECT mode, allowed_users FROM group_settings WHERE group_id = ?', (group_id,))\n    row = c.fetchone()\n    conn.close()\n    if row:\n        mode, allowed_users = row\n        allowed_users = [int(uid) for uid in allowed_users.split(',')] if allowed_users else []\n        return mode, allowed_users\n    return 'always', []\n\n@dp.message(Command(\"groupmode\"))\nasync def cmd_groupmode(message: types.Message, command: CommandObject):\n    if message.from_user.id not in OWNER_IDS:\n        await message.answer(\"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.\")\n        return\n    if message.chat.type not in (\"group\", \"supergroup\"):\n        await message.answer(\"–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.\")\n        return\n    group_id = message.chat.id\n    mode, allowed_users = get_group_mode(group_id)\n    builder = InlineKeyboardBuilder()\n    for k, v in GROUP_MODES.items():\n        builder.button(text=v, callback_data=f\"setgroupmode|{k}\")\n    text = f\"<b>–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ:</b>\\n{GROUP_MODES.get(mode, mode)}\"\n    if mode == 'users' and allowed_users:\n        text += f\"\\n–†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {', '.join(map(str, allowed_users))}\"\n    await message.answer(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)\n\n@dp.callback_query(F.data.startswith(\"setgroupmode|\"))\nasync def cb_setgroupmode(callback: types.CallbackQuery):\n    if callback.from_user.id not in OWNER_IDS:\n        await callback.answer(\"–ù–µ—Ç –ø—Ä–∞–≤\", show_alert=True)\n        return\n    group_id = callback.message.chat.id\n    _, mode = callback.data.split(\"|\", 1)\n    set_group_mode(group_id, mode)\n    await callback.answer(\"–†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª—ë–Ω\")\n    await callback.message.edit_text(f\"–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –≤ –≥—Ä—É–ø–ø–µ –æ–±–Ω–æ–≤–ª—ë–Ω: {GROUP_MODES.get(mode, mode)}\")\n\n@dp.message(Command(\"addgroupuser\"))\nasync def cmd_addgroupuser(message: types.Message, command: CommandObject):\n    if message.from_user.id not in OWNER_IDS:\n        await message.answer(\"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.\")\n        return\n    if message.chat.type not in (\"group\", \"supergroup\"):\n        await message.answer(\"–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.\")\n        return\n    if not command.args:\n        await message.answer(\"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addgroupuser <user_id>\")\n        return\n    group_id = message.chat.id\n    user_id = int(command.args[0])\n    mode, allowed_users = get_group_mode(group_id)\n    if user_id not in allowed_users:\n        allowed_users.append(user_id)\n        set_group_mode(group_id, 'users', allowed_users)\n    await message.answer(f\"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.\")\n\n@dp.message(Command(\"removegroupuser\"))\nasync def cmd_removegroupuser(message: types.Message, command: CommandObject):\n    if message.from_user.id not in OWNER_IDS:\n        await message.answer(\"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.\")\n        return\n    if message.chat.type not in (\"group\", \"supergroup\"):\n        await message.answer(\"–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.\")\n        return\n    if not command.args:\n        await message.answer(\"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removegroupuser <user_id>\")\n        return\n    group_id = message.chat.id\n    user_id = int(command.args[0])\n    mode, allowed_users = get_group_mode(group_id)\n    if user_id in allowed_users:\n        allowed_users.remove(user_id)\n        set_group_mode(group_id, 'users', allowed_users)\n    await message.answer(f\"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.\")\n\n@dp.message(Command(\"groupusers\"))\nasync def cmd_groupusers(message: types.Message, command: CommandObject):\n    if message.from_user.id not in OWNER_IDS:\n        await message.answer(\"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.\")\n        return\n    if message.chat.type not in (\"group\", \"supergroup\"):\n        await message.answer(\"–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.\")\n        return\n    group_id = message.chat.id\n    mode, allowed_users = get_group_mode(group_id)\n    if not allowed_users:\n        await message.answer(\"–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\")\n        return\n    await message.answer(\"–†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã: \" + \", \".join(map(str, allowed_users)))\n\ndef check_env_and_warn():\n    missing = []\n    if not TELEGRAM_TOKEN:\n        missing.append('TELEGRAM_TOKEN')\n    if not OPENROUTER_API_KEY:\n        missing.append('OPENROUTER_API_KEY')\n    if not os.getenv('OWNER_IDS'):\n        missing.append('OWNER_IDS')\n    if not LOG_CHAT_ID:\n        missing.append('LOG_CHAT_ID')\n    if missing:\n        msg = f\"[DeepSeekBot] –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}.\\n–ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.\"\n        print(msg)\n        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –∏ owner_id, –ø—Ä–æ–±—É–µ–º —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞\n        if TELEGRAM_TOKEN and OWNER_ID:\n            import asyncio\n            from aiogram import Bot\n            async def notify_owner():\n                bot = Bot(token=TELEGRAM_TOKEN)\n                try:\n                    await bot.send_message(OWNER_ID, msg)\n                except Exception:\n                    pass\n            asyncio.run(notify_owner())\n        exit(1)\n\n# --- –ó–∞–ø—É—Å–∫ ---\nasync def main():\n    check_env_and_warn()\n    init_db()\n    bot = Bot(token=TELEGRAM_TOKEN)\n    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π\n    asyncio.create_task(notify_file_changes(bot))\n    await dp.start_polling(bot)\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main()) "
}